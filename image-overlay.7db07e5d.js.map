{"version":3,"sources":["../src/utilities/description.ts","../src/utilities/elements.ts","../src/utilities/index.ts","../src/enhancements/ImageDetails/index.ts","../src/enhancements/ImageOverlay/draggable.ts","../src/enhancements/ImageOverlay/index.ts","../src/enhancements/ImageModal/index.ts","../src/index.ts","image-overlay/index.ts"],"names":[],"mappings":"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","file":"image-overlay.7db07e5d.js","sourceRoot":"../site","sourcesContent":["const omitTags = (...tagNames: string[]) => (n: Node): boolean => {\n\tif (n instanceof HTMLElement) {\n\t\treturn !tagNames.some((tagName) => tagName.toUpperCase() === n.tagName.toUpperCase());\n\t}\n\treturn true;\n};\n\ntype NodeFilter = (n: Node) => boolean;\n\nconst filterNode = <T extends Node = HTMLElement>(\n\tnode: T | null,\n\tfilters: NodeFilter[],\n): T | null => ((node && filters.some((test) => test(node))) ? node : null);\n\n/**\n * Fetch an element from a given url. If the URL is a whole document, the entire\n * body will be returned inside a `DocumentFragment`. Returns `null` if nothing\n * is found.\n */\nexport const fetchElement = async (\n\turl: string,\n\tinit?: Parameters<typeof fetch>[1],\n\tfilters: NodeFilter[] = [\n\t\tomitTags('script', 'style'),\n\t],\n): Promise<HTMLElement | DocumentFragment | null> => {\n\tconst req = new Request(url);\n\tconst { hash, origin, pathname } = new URL(req.url);\n\tconst currentPage = window.location.origin + window.location.pathname;\n\n\t// same-page reference\n\tif ((origin + pathname) === currentPage) {\n\t\treturn filterNode<HTMLElement>(document.querySelector(hash), filters);\n\t}\n\n\t// reference to another page\n\tconst res = await fetch(req, init);\n\tif (res.status === 200) {\n\t\tconst html = await res.text();\n\n\t\tconst parser = new DOMParser();\n\t\tconst doc = parser.parseFromString(html, 'text/html');\n\n\t\t// a fragment on another page\n\t\tif (hash) {\n\t\t\treturn filterNode<HTMLElement>(document.querySelector(hash), filters);\n\t\t}\n\n\t\t// the body doesn't have any contents\n\t\tif (doc.body.firstChild === null) return null;\n\n\t\tconst contents = new DocumentFragment();\n\t\tArray.from(doc.body.childNodes).forEach((node) => {\n\t\t\tif (filters.some((test) => test(node))) {\n\t\t\t\tcontents.append(node);\n\t\t\t}\n\t\t});\n\t\treturn contents;\n\t}\n\n\treturn null;\n};\n\n/** All of the HTML attributes that can be used to reference a description. */\nexport enum DescriptionAttribute {\n\tARIA_DETAILS = 'aria-details',\n\tARIA_DESCRIBEDBY = 'aria-describedby',\n\tLONGDESC = 'longdesc',\n}\n\nexport interface Description {\n\tattr: DescriptionAttribute | null;\n\tvalue: HTMLElement | null;\n}\n\nexport const getDescriptionByAttr = async (\n\tel: HTMLElement,\n\tattr: DescriptionAttribute,\n): Promise<HTMLElement | null> => {\n\tconst attrValue = el.getAttribute(attr);\n\tif (!el.hasAttribute(attr) || !attrValue) return null;\n\n\t// longdesc: retrieve the description from a separate document\n\tif (attr === DescriptionAttribute.LONGDESC) {\n\t\tconst contents = await fetchElement(attrValue);\n\t\tif (contents instanceof DocumentFragment) {\n\t\t\tconst desc = document.createElement('div');\n\t\t\tdesc.append(contents);\n\t\t\treturn desc;\n\t\t}\n\t\treturn contents;\n\t}\n\n\tconst ref = document.getElementById(attrValue);\n\tif (ref) return ref.cloneNode(true) as HTMLElement;\n\treturn null;\n};\n\n\n/**\n * Get the image's long description.\n * Look for description attributes on the image and return the value of the\n * description. Attribute preference is `aria-details` > `longdesc` >\n * `aria-describedby`.\n */\nexport const getDescription = async (el: HTMLElement): Promise<Description[]> => Promise.all(\n\tObject.values(DescriptionAttribute)\n\t\t.filter((attr) => el.hasAttribute(attr))\n\t\t.map(async (attr) => ({\n\t\t\tattr,\n\t\t\tvalue: await getDescriptionByAttr(el, attr),\n\t\t})),\n);\n","export interface SVGIcon {\n\td: string;\n\tviewBox: string;\n\tsource?: string;\n}\n\nconst materialViewBox = '0 0 24 24';\n\nexport const icons: Record<string, SVGIcon> = {\n\tdetails: {\n\t\td: 'M3 4l9 16 9-16H3zm3.38 2h11.25L12 16 6.38 6z',\n\t\tviewBox: materialViewBox,\n\t\tsource: 'https://material.io/resources/icons/?icon=details&style=baseline',\n\t},\n\tclose: {\n\t\td: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z',\n\t\tviewBox: materialViewBox,\n\t\tsource: 'https://material.io/resources/icons/?icon=close&style=baseline',\n\t},\n};\n\ninterface IconOptions {\n\tlabel?: string;\n\tclassName?: string;\n}\n\nconst SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\nexport const createIcon = (\n\t{ viewBox, d, source }: SVGIcon,\n\t{ label, className }: IconOptions = {},\n): SVGSVGElement => {\n\tconst attributes: [string, string][] = [\n\t\t['xmlns', SVG_NAMESPACE],\n\t\t['focusable', 'false'],\n\t\t['role', 'img'],\n\t\t['viewBox', viewBox],\n\t];\n\tattributes.push((label) ? ['aria-label', label] : ['aria-hidden', 'true']);\n\tif (className) attributes.push(['class', className]);\n\n\tconst svg = document.createElementNS(SVG_NAMESPACE, 'svg');\n\tattributes.forEach((attr) => svg.setAttribute(...attr));\n\n\tif (source) svg.append(document.createComment(source));\n\n\tconst path = document.createElementNS(SVG_NAMESPACE, 'path');\n\tpath.setAttribute('fill', 'currentColor');\n\tpath.setAttribute('d', d);\n\n\tsvg.append(path);\n\n\treturn svg;\n};\n\nexport const focusableSelectors = [\n\t'[contentEditable=true]:not([tabindex=\"-1\"])',\n\t'[tabindex]:not([tabindex=\"-1\"])',\n\t'a[href]:not([tabindex=\"-1\"])',\n\t'button:not([disabled]):not([tabindex=\"-1\"])',\n\t'dialog',\n\t'embed:not([tabindex=\"-1\"])',\n\t'iframe:not([tabindex=\"-1\"])',\n\t'input:not([disabled]):not([tabindex=\"-1\"])',\n\t'map[name] area[href]:not([tabindex=\"-1\"])',\n\t'object:not([tabindex=\"-1\"])',\n\t'select:not([disabled]):not([tabindex=\"-1\"])',\n\t'summary:not([tabindex=\"-1\"])',\n\t'textarea:not([disabled]):not([tabindex=\"-1\"])',\n];\n\nexport const getFocusable = (\n\tel: HTMLElement | Document | ShadowRoot = document,\n): NodeListOf<HTMLElement> => el.querySelectorAll(focusableSelectors.join(','));\n\nexport const appendContent = (to: HTMLElement, ...contents: (string | Node)[]): void => {\n\tcontents.forEach((content) => {\n\t\tif (typeof content === 'string') {\n\t\t\tconst div = document.createElement('div');\n\t\t\tdiv.innerHTML = content;\n\t\t\tto.append(div.firstChild as ChildNode);\n\t\t} else {\n\t\t\tto.append(content);\n\t\t}\n\t});\n};\n","export * from './description';\nexport * from './elements';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = (): void => {};\n\nconst styleString = (\n\tstyle: Record<string, string | null>,\n): string => Object.keys(style).reduce((a, attr) => {\n\tconst val = style[attr];\n\treturn (val) ? `${a} ${attr}: ${val};` : a;\n}, '').trim();\n\nexport const setStyle = (el: HTMLElement, style: Parameters<typeof styleString>[0]): void => {\n\tel.setAttribute('style', styleString(style));\n};\n\nexport const srOnly = (el: HTMLElement): void => setStyle(el, {\n\tposition: 'absolute',\n\twidth: '1px',\n\theight: '1px',\n\tpadding: '0',\n\tmargin: '-1px',\n\toverflow: 'hidden',\n\tclip: 'rect(0, 0, 0, 0)',\n\twhiteSpace: 'nowrap',\n\tborder: '0',\n});\n","import {\n\tDescriptionAttribute,\n\tDescription,\n\tgetDescription,\n\tappendContent,\n\tsrOnly,\n\tnoop,\n} from '../../utilities';\n\nexport interface ImageDetailsOptions {\n\t/**\n\t * Indicates that the image's `alt` contents should be copied to the\n\t * <details> as its first child. This will be `aria-hidden` so that users\n\t * who read it on the image don't have to read it again.\n\t */\n\taddAltText?: boolean;\n\t/**\n\t * Where the `<details>` should be placed relative to the image in the DOM.\n\t *\n\t * * `after-image` indicates `img + details`.\n\t * * `before-image` indicates `details + img`.\n\t */\n\tdetailsPlacement?: 'after-image' | 'before-image';\n\t/**\n\t * Indicates whether the summary's textual content should be visible. If\n\t * `false`, the summary text will be set as both the `aria-label` and `title`.\n\t */\n\tdisplaySummaryText?: boolean;\n\t/**\n\t * Indicates that the `Escape` key should close the `<details>`. Note that\n\t * `Escape` will always close the `details` if focus is on the `<summary>`.\n\t */\n\tcloseOnEscape?: boolean;\n\t/**\n\t * HTML string heading for the alt text section of the `<details>`. Only used\n\t * if `addAltText` is `true`. Default is `<h2>Alt Text</h2>`.\n\t */\n\taltSectionHeading?: () => string | HTMLElement;\n\t/**\n\t * HTML string heading for the long description section of the `<details>`.\n\t * Default is `<h2>Image Description</h2>`.\n\t */\n\tdescriptionHeading?: () => string | HTMLElement;\n\t/**\n\t * A custom `summary::marker` element. If included, it will be added as the\n\t * first child of the `<summary>` and will be accessible on the instance as\n\t * `ImageDetailsInstance.marker`.\n\t *\n\t * To specify a different element on open and close, pass an object with\n\t * `open` and `closed` values.\n\t */\n\tsummaryMarker?: () => string | HTMLElement | SVGSVGElement | null;\n\t/** Text to display in the <summary> element. */\n\tsummaryText?: (\n\t\t/** Indicates whether a long description exists. */\n\t\thasDescription: boolean\n\t) => string;\n\t/**\n\t * The class for the `<div>` that wraps the `<img> + <details>`. This will\n\t * also be used as the \"block\" name in the BEM class naming for child elements.\n\t */\n\tblockName?: string;\n\tonGetDescription?: (descriptions: Description[]) => void;\n}\n\nconst ImageDetailsInstances = new Set<ImageDetails>();\n\nexport class ImageDetails {\n\tpublic description?: string | Node | null;\n\tpublic container: HTMLElement;\n\tpublic details: HTMLDetailsElement;\n\tpublic summary!: HTMLElement;\n\tpublic marker!: HTMLSpanElement;\n\tpublic contents!: HTMLDivElement;\n\tpublic descriptionSection: HTMLElement | null = null;\n\tpublic descriptionAttribute: DescriptionAttribute | null = null;\n\tprivate originalImage: HTMLImageElement;\n\tprivate originalDetails: HTMLDetailsElement | null = null;\n\tprivate descriptionAdded = false;\n\t// private hasAdjacentDetails = false;\n\t// private existingDetailsDescription = false;\n\n\tpublic static baseName = 'image-details';\n\tpublic static defaultOptions: Required<ImageDetailsOptions> = {\n\t\taddAltText: true,\n\t\tdetailsPlacement: 'after-image',\n\t\tdisplaySummaryText: true,\n\t\tcloseOnEscape: true,\n\t\taltSectionHeading: () => '<h2>Alt Text</h2>',\n\t\tdescriptionHeading: () => '<h2>Image Description</h2>',\n\t\tsummaryMarker: () => null,\n\t\tsummaryText: (hasDescription: boolean): string => {\n\t\t\tlet text = 'Description';\n\t\t\tif (!hasDescription) text += ' (only alt text)';\n\t\t\treturn text;\n\t\t},\n\n\t\tblockName: 'image-details',\n\n\t\tonGetDescription: noop,\n\t}\n\n\tprotected constructor(\n\t\tpublic image: HTMLImageElement,\n\t\tpublic options: Required<ImageDetailsOptions>,\n\t) {\n\t\tthis.originalImage = this.image.cloneNode(true) as HTMLImageElement;\n\n\t\tthis.image.classList.add(this.getClass('image'));\n\n\t\tthis.container = this.createContainer();\n\t\tthis.details = this.createDetails();\n\n\t\tthis.container.append(this.image, this.details);\n\n\t\tImageDetailsInstances.add(this);\n\t}\n\n\tpublic get hasDescription(): boolean {\n\t\treturn Object.values(DescriptionAttribute)\n\t\t\t.some((attr) => this.image.getAttribute(attr));\n\t}\n\n\tpublic async addDescription(description?: string | Node): Promise<void> {\n\t\tif (this.descriptionAdded) return;\n\t\tconst { descriptionHeading, onGetDescription = noop } = this.options;\n\n\t\tif (description) {\n\t\t\tthis.description = description;\n\t\t} else {\n\t\t\tconst descriptions = await getDescription(this.image);\n\t\t\tonGetDescription.call(this, descriptions);\n\t\t\tif (descriptions.length) {\n\t\t\t\tconst [{ attr, value }] = descriptions;\n\t\t\t\tthis.descriptionAttribute = attr;\n\t\t\t\tthis.description = value;\n\t\t\t}\n\t\t}\n\n\t\tif (this.description && this.descriptionSection) {\n\t\t\tappendContent(this.descriptionSection, descriptionHeading(), this.description);\n\t\t\tthis.descriptionAdded = true;\n\t\t}\n\t}\n\n\tpublic destroy(): this {\n\t\t(this.container.parentNode || document).insertBefore(this.originalImage, this.container);\n\t\tif (this.originalDetails) {\n\t\t\tconst { detailsPlacement } = this.options;\n\t\t\tconst refChild = (detailsPlacement === 'after-image')\n\t\t\t\t? this.originalImage.nextSibling\n\t\t\t\t: this.originalImage;\n\t\t\t(this.originalImage.parentNode || document).insertBefore(this.originalDetails, refChild);\n\t\t}\n\t\tthis.container.remove();\n\t\tImageDetailsInstances.delete(this);\n\t\treturn this;\n\t}\n\n\t// element constructors\n\n\tprivate createContainer(): HTMLElement {\n\t\tif (this.container) return this.container;\n\t\tconst { blockName } = this.options;\n\t\tconst { parentElement } = this.image;\n\t\tconst container = (\n\t\t\tparentElement instanceof HTMLElement && parentElement.classList.contains(blockName)\n\t\t) ? parentElement : document.createElement('div');\n\t\tcontainer.classList.add(blockName);\n\t\tif (container.contains(this.image)) return container;\n\n\t\t// append to the document\n\t\t(parentElement || document).insertBefore(container, this.image);\n\n\t\treturn container;\n\t}\n\n\tprivate createDetails(): HTMLDetailsElement {\n\t\tif (this.details) return this.details;\n\t\tconst { detailsPlacement } = this.options;\n\n\t\tlet details = document.createElement('details');\n\n\t\tconst detailsCandidate = (detailsPlacement === 'after-image')\n\t\t\t? this.image.nextElementSibling\n\t\t\t: this.image.previousElementSibling;\n\n\t\tif (detailsCandidate instanceof HTMLDetailsElement) {\n\t\t\t// `img + details` already exists so use it, storing a copy of the original\n\t\t\tthis.originalDetails = detailsCandidate.cloneNode(true) as HTMLDetailsElement;\n\t\t\tdetails = detailsCandidate;\n\t\t} else {\n\t\t\t// add the new details to the document\n\t\t\tconst refChild = (detailsPlacement === 'after-image')\n\t\t\t\t? this.image.nextSibling : this.image;\n\t\t\t(this.image.parentNode || document).insertBefore(details, refChild);\n\n\t\t\t// create the summary\n\t\t\tthis.summary = this.createSummary();\n\t\t\tdetails.prepend(this.summary);\n\n\t\t\t// create the summary marker\n\t\t\tthis.marker = this.createMarker();\n\t\t\tthis.summary.prepend(this.marker);\n\n\t\t\t// create the contents\n\t\t\tthis.contents = this.createContents();\n\t\t\tdetails.append(this.contents);\n\t\t}\n\n\t\tdetails.classList.add(this.getClass('details'));\n\n\t\treturn details;\n\t}\n\n\tprivate createSummary(): HTMLElement {\n\t\tconst { displaySummaryText, summaryText } = this.options;\n\n\t\tconst summary = document.createElement('summary');\n\t\tsummary.classList.add(this.getClass('summary'));\n\t\tconst text = summaryText(this.hasDescription);\n\t\tconst span = document.createElement('span');\n\t\tappendContent(span, text);\n\t\tif (!displaySummaryText) srOnly(span);\n\t\tsummary.append(span);\n\n\t\treturn summary;\n\t}\n\n\tprivate createMarker(): HTMLSpanElement {\n\t\tconst { summaryMarker } = this.options;\n\n\t\tconst innerMarker = summaryMarker();\n\t\tconst marker = document.createElement('span');\n\t\tmarker.classList.add(this.getClass('marker'));\n\t\tif (innerMarker) marker.append(innerMarker);\n\n\t\treturn marker;\n\t}\n\n\tprivate createContents(): HTMLDivElement {\n\t\tconst { addAltText } = this.options;\n\n\t\tconst contents = document.createElement('div');\n\t\tcontents.classList.add(this.getClass('contents'));\n\t\tif (addAltText) contents.append(this.createAltSection());\n\t\tcontents.append(this.createDescriptionSection());\n\n\t\treturn contents;\n\t}\n\n\tprivate createAltSection(): HTMLElement {\n\t\tconst { altSectionHeading } = this.options;\n\t\tconst section = document.createElement('section');\n\t\tsection.classList.add(this.getClass('alt'));\n\t\tsection.setAttribute('aria-hidden', 'true');\n\t\tappendContent(section, altSectionHeading(), `<p>${this.image.alt}</p>`);\n\t\treturn section;\n\t}\n\n\tprivate createDescriptionSection(): HTMLElement {\n\t\tconst section = document.createElement('section');\n\t\tsection.classList.add(this.getClass('desc'));\n\t\tthis.descriptionSection = section;\n\t\treturn section;\n\t}\n\n\tprivate getClass(element: string, asSelector = false): string {\n\t\tconst { blockName } = this.options;\n\t\tconst className = `${blockName}__${element}`;\n\t\tif (asSelector) return `.${className}`;\n\t\treturn className;\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: ImageDetailsOptions,\n\t): Promise<ImageDetails | null> {\n\t\tconst opts = { ...ImageDetails.defaultOptions, ...options };\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageDetails(image, opts);\n\t\tawait instance.addDescription();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll(\n\t\t{ selector = 'img', ...options }: ImageDetailsOptions & { selector?: string } = {},\n\t): Promise<typeof ImageDetails.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageDetails.enhance(el, options)));\n\t\treturn ImageDetails.instances;\n\t}\n\n\tpublic static get instances(): ImageDetails[] {\n\t\treturn Array.from(ImageDetailsInstances);\n\t}\n}\n","import { getFocusable, setStyle, noop } from '../../utilities';\n\nexport interface DraggablePosition {\n\ttop: number | null;\n\tleft: number | null;\n}\n\ninterface DraggableOptions {\n\t/**\n\t * A list of elements that will not initiate the `grab` action, which begins\n\t * the element dragging.\n\t */\n\texcludedElements?: HTMLElement[] | ((draggableElement: HTMLElement) => HTMLElement[]);\n\t/**\n\t * Indicates that all focusable/interactive elements inside the draggable\n\t * element should not initiate dragging. Default is `true`.\n\t */\n\texcludeFocusable?: boolean;\n\n\tonDrag?: () => void;\n\tonGrab?: () => void;\n\tonMove?: () => void;\n\tonRelease?: () => void;\n}\n\nexport class Draggable {\n\tpublic options: Required<DraggableOptions>;\n\tprivate moveX = 0;\n\tprivate moveY = 0;\n\tprivate canGrab = false;\n\tprivate grabbed = false;\n\n\tprotected constructor(\n\t\tpublic el: HTMLElement,\n\t\tpublic keyboardEl: HTMLElement | null,\n\t\toptions?: Partial<DraggableOptions>,\n\t) {\n\t\tthis.options = { ...Draggable.defaultOptions, ...options };\n\n\t\tthis.el.addEventListener('pointerdown', this.grab);\n\t\tthis.el.addEventListener('pointerleave', this.release);\n\t\tthis.el.addEventListener('pointermove', this.pointermove);\n\t\tthis.el.addEventListener('pointerup', this.release);\n\n\t\tif (this.keyboardEl) {\n\t\t\tthis.keyboardEl.addEventListener('keydown', this.moveWithKeyboard);\n\t\t}\n\t}\n\n\tpublic move(x: number, y: number): void {\n\t\tconst { top, left } = this.pos;\n\t\tif (top !== null && left !== null) {\n\t\t\tsetStyle(this.el, {\n\t\t\t\tposition: 'absolute',\n\t\t\t\tleft: `${left + x}px`,\n\t\t\t\ttop: `${top + y}px`,\n\t\t\t});\n\t\t}\n\t\tthis.options.onMove();\n\t}\n\n\tpublic resetPosition(): void {\n\t\tsetStyle(this.el, {\n\t\t\tposition: null,\n\t\t\ttop: null,\n\t\t\tleft: null,\n\t\t});\n\t}\n\n\tpublic get pos(): DraggablePosition {\n\t\tconst { top = '0', left = '0' } = window.getComputedStyle(this.el);\n\t\treturn {\n\t\t\ttop: (top === 'auto') ? null : parseInt(top, 10),\n\t\t\tleft: (top === 'auto') ? null : parseInt(left, 10),\n\t\t};\n\t}\n\n\tprivate grab = (e: MouseEvent): void => {\n\t\tif (!this.canGrab) return;\n\n\t\tthis.moveX = e.clientX;\n\t\tthis.moveY = e.clientY;\n\t\tthis.grabbed = true;\n\t\tthis.options.onGrab();\n\t};\n\n\tprivate release = (): void => {\n\t\tthis.moveX = 0;\n\t\tthis.moveY = 0;\n\t\tthis.grabbed = false;\n\t\tthis.options.onRelease();\n\t};\n\n\tprivate drag = ({ clientX, clientY }: MouseEvent): void => {\n\t\tthis.move(clientX - this.moveX, clientY - this.moveY);\n\t\tthis.moveX = clientX;\n\t\tthis.moveY = clientY;\n\t\tthis.options.onDrag();\n\t}\n\n\tprivate pointermove = (e: MouseEvent): void => {\n\t\tif (this.grabbed) {\n\t\t\tthis.drag(e);\n\t\t} else {\n\t\t\tconst { excludedElements, excludeFocusable } = this.options;\n\n\t\t\tconst excluded = [\n\t\t\t\t...((typeof excludedElements === 'function') ? excludedElements(this.el) : excludedElements),\n\t\t\t\t...((excludeFocusable) ? Array.from(getFocusable(this.el)) : []),\n\t\t\t].filter((el) => el && e.composedPath().includes(el));\n\n\t\t\tthis.canGrab = !excluded.some(Boolean);\n\t\t}\n\t};\n\n\tprivate moveWithKeyboard = (e: KeyboardEvent): void => {\n\t\tconst mod = e.shiftKey ? 20 : 1;\n\t\tconst step = mod * 1;\n\t\tlet left = 0;\n\t\tlet top = 0;\n\t\tswitch (e.key) {\n\t\t\tcase 'ArrowRight':\n\t\t\t\tleft = 5;\n\t\t\t\tbreak;\n\t\t\tcase 'ArrowLeft':\n\t\t\t\tleft = -5;\n\t\t\t\tbreak;\n\t\t\tcase 'ArrowDown':\n\t\t\t\ttop = 5;\n\t\t\t\tbreak;\n\t\t\tcase 'ArrowUp':\n\t\t\t\ttop = -5;\n\t\t\t\tbreak;\n\t\t\tcase 'Home':\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.resetPosition();\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\te.preventDefault();\n\t\tthis.move(left * step, top * step);\n\t};\n\n\tpublic static defaultOptions: Required<DraggableOptions> = {\n\t\texcludedElements: [],\n\t\texcludeFocusable: true,\n\n\t\tonDrag: noop,\n\t\tonGrab: noop,\n\t\tonMove: noop,\n\t\tonRelease: noop,\n\t};\n\n\tpublic static makeDraggable({ el, keyboardEl, ...options }: DraggableOptions & {\n\t\tel: HTMLElement;\n\t\tkeyboardEl: HTMLElement | null;\n\t}): Draggable {\n\t\treturn new Draggable(el, keyboardEl, options);\n\t}\n}\n\nexport const { makeDraggable } = Draggable;\n","import { ImageDetails } from '../ImageDetails';\nimport {\n\tDescriptionAttribute, createIcon, icons, Description, noop,\n} from '../../utilities';\nimport { makeDraggable } from './draggable';\n\nexport interface ImageOverlayOptions {\n\t/**\n\t * Indicates that the `Escape` key should close all `<details>`. Note that\n\t * `Escape` will always close the `details` if focus is on the `<summary>`.\n\t */\n\tcloseAllOnEscape?: boolean;\n\tdraggableClass?: string;\n\tdraggingClass?: string;\n\tresizableClass?: string;\n\tonGetDescription?: (descriptions: Description[]) => void;\n}\n\nconst ImageOverlayInstances = new Set<ImageOverlay>();\n\nexport class ImageOverlay {\n\tprivate enabled = false;\n\tpublic ImageDetails: ImageDetails | null = null;\n\n\tpublic static defaultOptions: Required<ImageOverlayOptions> = {\n\t\tcloseAllOnEscape: true,\n\t\tdraggingClass: 'dragging',\n\t\tdraggableClass: 'draggable',\n\t\tresizableClass: 'resizable',\n\t\tonGetDescription: noop,\n\t}\n\n\tprotected constructor(\n\t\tpublic image: HTMLImageElement,\n\t\tpublic options: Required<ImageOverlayOptions>,\n\t) {\n\t\tImageOverlayInstances.add(this);\n\t}\n\n\tpublic async enable(): Promise<void> {\n\t\tif (this.enabled) return;\n\n\t\tthis.ImageDetails = await ImageDetails.enhance(this.image, {\n\t\t\tblockName: 'overlaid',\n\t\t\tdisplaySummaryText: false,\n\t\t\tsummaryMarker: () => createIcon(icons.details),\n\t\t\tonGetDescription: this.options.onGetDescription,\n\t\t});\n\n\t\tif (!this.ImageDetails) return;\n\n\t\tconst { details, summary } = this.ImageDetails;\n\t\tconst { draggingClass } = this.options;\n\n\t\tmakeDraggable({\n\t\t\tel: details,\n\t\t\tkeyboardEl: summary,\n\t\t\tonDrag: () => {\n\t\t\t\tdetails.classList.add(draggingClass);\n\t\t\t},\n\t\t\tonRelease: () => {\n\t\t\t\tdetails.classList.remove(draggingClass);\n\t\t\t},\n\t\t});\n\n\t\tdetails.addEventListener('toggle', this.onToggle);\n\t\tdocument.addEventListener('keydown', this.onDocumentKeydown);\n\n\t\tthis.enabled = true;\n\t}\n\n\tpublic disable(): this {\n\t\tif (!this.enabled || !this.ImageDetails) return this;\n\t\tconst { details } = this.ImageDetails;\n\t\tdetails.removeEventListener('toggle', this.onToggle);\n\t\tdocument.removeEventListener('keydown', this.onDocumentKeydown);\n\t\tthis.enabled = false;\n\t\treturn this;\n\t}\n\n\tpublic destroy(): this {\n\t\tif (this.enabled) this.disable();\n\t\tif (this.ImageDetails) this.ImageDetails.destroy();\n\t\tImageOverlayInstances.delete(this);\n\t\treturn this;\n\t}\n\n\tpublic get isOpen(): boolean {\n\t\treturn (this.ImageDetails)\n\t\t\t? this.ImageDetails.details.open\n\t\t\t: false;\n\t}\n\n\tprivate onToggle = (): void => {\n\t\tif (!this.ImageDetails) return;\n\t\tconst { draggableClass, resizableClass } = this.options;\n\t\tconst { details, marker } = this.ImageDetails;\n\t\tif (details.open) {\n\t\t\tdetails.classList.add(draggableClass);\n\t\t\tdetails.classList.add(resizableClass);\n\t\t\tmarker.innerHTML = createIcon(icons.close).outerHTML;\n\t\t} else {\n\t\t\tdetails.classList.remove(draggableClass);\n\t\t\tdetails.classList.remove(resizableClass);\n\t\t\tdetails.removeAttribute('style');\n\t\t\tmarker.innerHTML = createIcon(icons.details).outerHTML;\n\t\t}\n\t}\n\n\tprivate onDocumentKeydown = (e: KeyboardEvent): void => {\n\t\tif (!this.ImageDetails || e.key !== 'Escape') return;\n\n\t\tconst { closeAllOnEscape } = this.options;\n\t\tconst { details } = this.ImageDetails;\n\t\tif (closeAllOnEscape) details.removeAttribute('open');\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: ImageOverlayOptions,\n\t): Promise<ImageOverlay | null> {\n\t\tconst opts = { ...ImageOverlay.defaultOptions, ...options };\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageOverlay(image, opts);\n\t\tawait instance.enable();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll(\n\t\t{ selector = 'img', ...options }: Partial<ImageOverlayOptions & { selector?: string }> = {},\n\t): Promise<typeof ImageOverlay.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageOverlay.enhance(el, options)));\n\t\treturn ImageOverlay.instances;\n\t}\n\n\tpublic static get instances(): ImageOverlay[] {\n\t\treturn Array.from(ImageOverlayInstances);\n\t}\n}\n","const ImageModalInstances = new Set<ImageModal>();\n\ninterface EnhanceAllOptions {\n\tselector?: string;\n}\n\ninterface ImageModalOptions {\n\tfoo?: string;\n}\n\n/**\n * TODO: implement an enhancement that displays the image and its description in\n * a modal dialog interface.\n */\nexport class ImageModal {\n\tprotected constructor(\n\t\tpublic image: HTMLImageElement,\n\t\tpublic options: Required<ImageModalOptions>,\n\t) {\n\t\tImageModalInstances.add(this);\n\t}\n\n\tpublic static selector = 'img';\n\n\tpublic static get instances(): ImageModal[] {\n\t\treturn Array.from(ImageModalInstances);\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: Partial<ImageModal['options']>,\n\t): Promise<ImageModal | null> {\n\t\tconst opts = {\n\t\t\t...ImageModal.defaultOptions,\n\t\t\t...options,\n\t\t};\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageModal(image, opts);\n\t\tawait instance.enable();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll({\n\t\tselector = ImageModal.selector,\n\t\t...options\n\t}: EnhanceAllOptions = {}): Promise<typeof ImageModal.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageModal.enhance(el, options)));\n\t\treturn ImageModal.instances;\n\t}\n\n\tpublic static defaultOptions: Required<ImageModalOptions> = {\n\t\tfoo: '',\n\t}\n}\n","export * from './enhancements/ImageDetails';\nexport * from './enhancements/ImageOverlay';\nexport * from './enhancements/ImageModal';\nexport * from './utilities';\n","import { ImageDetails, ImageOverlay } from '../../src';\n\nImageOverlay.enhanceAll({\n\tselector: '.overlay',\n\tonGetDescription: console.log,\n}).then(console.log);\n\nImageDetails.enhanceAll({\n\tselector: '.details',\n\tonGetDescription: console.log,\n}).then(console.log);\n"]}