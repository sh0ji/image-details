{"version":3,"sources":["../src/enhancements/ImageModal/index.ts","../src/utilities/description.ts","../src/utilities/elements.ts","../src/utilities/misc.ts","../src/enhancements/ImageOverlay/draggable.ts","../src/enhancements/ImageOverlay/index.ts","../src/index.ts","image-overlay/index.ts"],"names":[],"mappings":"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","file":"image-overlay.9103a366.js","sourceRoot":"../site","sourcesContent":["/**\n * TODO: implement an enhancement that displays the image and its description in\n * a modal dialog interface.\n */\nexport class ImageModal {\n\n}\n","const omitTags = (...tagNames: string[]) => (n: Node): boolean => {\n\tif (n instanceof HTMLElement) {\n\t\treturn !tagNames.some((tagName) => tagName.toUpperCase() === n.tagName.toUpperCase());\n\t}\n\treturn true;\n};\n\ntype NodeFilter = (n: Node) => boolean;\n\nconst filterNode = <T extends Node = HTMLElement>(\n\tnode: T | null,\n\tfilters: NodeFilter[],\n): T | null => ((node && filters.some((test) => test(node))) ? node : null);\n\n/**\n * Fetch an element from a given url. If the URL is a whole document, the entire\n * body will be returned inside a `DocumentFragment`. Returns `null` if nothing\n * is found.\n */\nexport const fetchElement = async (\n\turl: string,\n\tinit?: Parameters<typeof fetch>[1],\n\tfilters: NodeFilter[] = [\n\t\tomitTags('script', 'style'),\n\t],\n): Promise<HTMLElement | DocumentFragment | null> => {\n\tconst req = new Request(url);\n\tconst { hash, origin, pathname } = new URL(req.url);\n\tconst currentPage = window.location.origin + window.location.pathname;\n\n\t// same-page reference\n\tif ((origin + pathname) === currentPage) {\n\t\treturn filterNode<HTMLElement>(document.querySelector(hash), filters);\n\t}\n\n\t// reference to another page\n\tconst res = await fetch(req, init);\n\tif (res.status === 200) {\n\t\tconst html = await res.text();\n\n\t\tconst parser = new DOMParser();\n\t\tconst doc = parser.parseFromString(html, 'text/html');\n\n\t\t// a fragment on another page\n\t\tif (hash) {\n\t\t\treturn filterNode<HTMLElement>(document.querySelector(hash), filters);\n\t\t}\n\n\t\t// the body doesn't have any contents\n\t\tif (doc.body.firstChild === null) return null;\n\n\t\tconst contents = new DocumentFragment();\n\t\tArray.from(doc.body.childNodes).forEach((node) => {\n\t\t\tif (filters.some((test) => test(node))) {\n\t\t\t\tcontents.append(node);\n\t\t\t}\n\t\t});\n\t\treturn contents;\n\t}\n\n\treturn null;\n};\n\n/** All of the HTML attributes that can be used to reference a description. */\nexport enum DescriptionAttribute {\n\tARIA_DETAILS = 'aria-details',\n\tARIA_DESCRIBEDBY = 'aria-describedby',\n\tLONGDESC = 'longdesc',\n}\n\nexport class Describer {\n\tpublic attr: DescriptionAttribute;\n\tpublic parser: (val: string) => Promise<HTMLElement | null>;\n\n\tpublic constructor(attr: DescriptionAttribute) {\n\t\tthis.attr = attr;\n\n\t\tswitch (attr) {\n\t\t\tcase DescriptionAttribute.ARIA_DETAILS:\n\t\t\tcase DescriptionAttribute.ARIA_DESCRIBEDBY:\n\t\t\t\tthis.parser = async (\n\t\t\t\t\tval: string,\n\t\t\t\t): Promise<HTMLElement | null> => {\n\t\t\t\t\tconst el = document.getElementById(val);\n\t\t\t\t\tif (el) return el.cloneNode(true) as HTMLElement;\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase DescriptionAttribute.LONGDESC:\n\t\t\t\tthis.parser = async (val: string): Promise<HTMLElement | null> => {\n\t\t\t\t\tconst contents = await fetchElement(val);\n\t\t\t\t\tif (contents instanceof DocumentFragment) {\n\t\t\t\t\t\tconst el = document.createElement('div');\n\t\t\t\t\t\tel.append(contents);\n\t\t\t\t\t\treturn el;\n\t\t\t\t\t}\n\t\t\t\t\treturn contents;\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`${attr} is not a valid descriptions attribute.`);\n\t\t}\n\t}\n\n\tpublic async getDescription(el: HTMLElement): Promise<HTMLElement | null> {\n\t\tconst val = el.getAttribute(this.attr);\n\t\tif (!val) return Promise.resolve(null);\n\t\treturn this.parser(val);\n\t}\n\n\tpublic static async get(\n\t\tel: HTMLElement,\n\t\tattr: DescriptionAttribute,\n\t): Promise<HTMLElement | null> {\n\t\treturn new Describer(attr).getDescription(el);\n\t}\n}\n\nexport interface Description {\n\tattr: DescriptionAttribute | null;\n\tdesc: HTMLElement | null;\n}\n\n/**\n * Get the image's long description.\n * Look for description attributes on the image and return the value of the\n * description. Attribute preference is `aria-details` > `longdesc` >\n * `aria-describedby`.\n */\nexport const getDescription = async (el: HTMLElement): Promise<Description> => {\n\tlet attr = null;\n\t// 1. aria-details\n\tlet desc = await Describer.get(el, DescriptionAttribute.ARIA_DETAILS);\n\tif (desc) {\n\t\tattr = DescriptionAttribute.ARIA_DETAILS;\n\t}\n\n\t// 2. longdesc\n\tif (!attr) {\n\t\tdesc = await Describer.get(el, DescriptionAttribute.LONGDESC);\n\t\tif (desc) attr = DescriptionAttribute.LONGDESC;\n\t}\n\n\t// 3. aria-describedby\n\tif (!attr) {\n\t\tdesc = await Describer.get(el, DescriptionAttribute.ARIA_DESCRIBEDBY);\n\t\tif (desc) attr = DescriptionAttribute.ARIA_DESCRIBEDBY;\n\t}\n\n\treturn { attr, desc };\n};\n","export interface SVGIcon {\n\td: string;\n\tviewBox: string;\n\tsource?: string;\n}\n\nconst materialViewBox = '0 0 24 24';\n\nexport const icons: Record<string, SVGIcon> = {\n\tdetails: {\n\t\td: 'M3 4l9 16 9-16H3zm3.38 2h11.25L12 16 6.38 6z',\n\t\tviewBox: materialViewBox,\n\t\tsource: 'https://material.io/resources/icons/?icon=details&style=baseline',\n\t},\n\tclose: {\n\t\td: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z',\n\t\tviewBox: materialViewBox,\n\t\tsource: 'https://material.io/resources/icons/?icon=close&style=baseline',\n\t},\n};\n\ninterface IconOptions {\n\tlabel?: string;\n\tclassName?: string;\n}\n\nconst SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\nexport const createIcon = (\n\t{ viewBox, d, source }: SVGIcon,\n\t{ label, className }: IconOptions = {},\n): SVGSVGElement => {\n\tconst attributes: [string, string][] = [\n\t\t['xmlns', SVG_NAMESPACE],\n\t\t['focusable', 'false'],\n\t\t['role', 'img'],\n\t\t['viewBox', viewBox],\n\t];\n\tattributes.push((label) ? ['aria-label', label] : ['aria-hidden', 'true']);\n\tif (className) attributes.push(['class', className]);\n\n\tconst svg = document.createElementNS(SVG_NAMESPACE, 'svg');\n\tattributes.forEach((attr) => svg.setAttribute(...attr));\n\n\tif (source) svg.append(document.createComment(source));\n\n\tconst path = document.createElementNS(SVG_NAMESPACE, 'path');\n\tpath.setAttribute('fill', 'currentColor');\n\tpath.setAttribute('d', d);\n\n\tsvg.append(path);\n\n\treturn svg;\n};\n\nexport const focusableSelectors = [\n\t'[contentEditable=true]:not([tabindex=\"-1\"])',\n\t'[tabindex]:not([tabindex=\"-1\"])',\n\t'a[href]:not([tabindex=\"-1\"])',\n\t'button:not([disabled]):not([tabindex=\"-1\"])',\n\t'dialog',\n\t'embed:not([tabindex=\"-1\"])',\n\t'iframe:not([tabindex=\"-1\"])',\n\t'input:not([disabled]):not([tabindex=\"-1\"])',\n\t'map[name] area[href]:not([tabindex=\"-1\"])',\n\t'object:not([tabindex=\"-1\"])',\n\t'select:not([disabled]):not([tabindex=\"-1\"])',\n\t'summary:not([tabindex=\"-1\"])',\n\t'textarea:not([disabled]):not([tabindex=\"-1\"])',\n];\n\nexport const getFocusable = (\n\tel: HTMLElement | Document | ShadowRoot = document,\n): NodeListOf<HTMLElement> => el.querySelectorAll(focusableSelectors.join(','));\n","const styleString = (\n\tstyle: Record<string, string | null>,\n): string => Object.keys(style).reduce((a, attr) => {\n\tconst val = style[attr];\n\treturn (val) ? `${a} ${attr}: ${val};` : a;\n}, '').trim();\n\nexport const setStyle = (el: HTMLElement, style: Parameters<typeof styleString>[0]): void => {\n\tel.setAttribute('style', styleString(style));\n};\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = (): void => {};\n","import { getFocusable } from '../../utilities/elements';\nimport { setStyle, noop } from '../../utilities/misc';\n\ninterface DraggableOptions {\n\t/**\n\t * A list of elements that will not initiate the `grab` action, which begins\n\t * the element dragging.\n\t */\n\texcludedElements?: HTMLElement[] | ((draggableElement: HTMLElement) => HTMLElement[]);\n\t/**\n\t * Indicates that all focusable/interactive elements inside the draggable\n\t * element should not initiate dragging. Default is `true`.\n\t */\n\texcludeFocusable?: boolean;\n\n\tonDrag?: () => void;\n\tonGrab?: () => void;\n\tonMove?: () => void;\n\tonRelease?: () => void;\n}\n\nexport interface DraggableOptionsRequired {\n\tel: HTMLElement;\n\tkeyboardEl: HTMLElement;\n}\n\nexport interface DraggablePosition {\n\ttop: number | null;\n\tleft: number | null;\n}\n\nexport class Draggable {\n\tpublic options: Required<DraggableOptions>;\n\tprivate moveX = 0;\n\tprivate moveY = 0;\n\tprivate canGrab = false;\n\tprivate grabbed = false;\n\n\tprotected constructor(\n\t\tpublic el: HTMLElement,\n\t\tpublic keyboardEl: HTMLElement,\n\t\toptions?: DraggableOptions,\n\t) {\n\t\tthis.options = { ...Draggable.defaultOptions, ...options };\n\n\t\tthis.el.addEventListener('pointerdown', this.grab);\n\t\tthis.el.addEventListener('pointerleave', this.release);\n\t\tthis.el.addEventListener('pointermove', this.pointermove);\n\t\tthis.el.addEventListener('pointerup', this.release);\n\n\t\tthis.keyboardEl.addEventListener('keydown', this.moveWithKeyboard);\n\t}\n\n\tpublic move(x: number, y: number): void {\n\t\tconst { top, left } = this.pos;\n\t\tif (top !== null && left !== null) {\n\t\t\tsetStyle(this.el, {\n\t\t\t\tposition: 'absolute',\n\t\t\t\tleft: `${left + x}px`,\n\t\t\t\ttop: `${top + y}px`,\n\t\t\t});\n\t\t}\n\t\tthis.options.onMove();\n\t}\n\n\tpublic resetPosition(): void {\n\t\tsetStyle(this.el, {\n\t\t\tposition: null,\n\t\t\ttop: null,\n\t\t\tleft: null,\n\t\t});\n\t}\n\n\tpublic get pos(): DraggablePosition {\n\t\tconst { top = '0', left = '0' } = window.getComputedStyle(this.el);\n\t\treturn {\n\t\t\ttop: (top === 'auto') ? null : parseInt(top, 10),\n\t\t\tleft: (top === 'auto') ? null : parseInt(left, 10),\n\t\t};\n\t}\n\n\tprivate grab = (e: MouseEvent): void => {\n\t\tif (!this.canGrab) return;\n\n\t\tthis.moveX = e.clientX;\n\t\tthis.moveY = e.clientY;\n\t\tthis.grabbed = true;\n\t\tthis.options.onGrab();\n\t};\n\n\tprivate release = (): void => {\n\t\tthis.moveX = 0;\n\t\tthis.moveY = 0;\n\t\tthis.grabbed = false;\n\t\tthis.options.onRelease();\n\t};\n\n\tprivate drag = ({ clientX, clientY }: MouseEvent): void => {\n\t\tthis.move(clientX - this.moveX, clientY - this.moveY);\n\t\tthis.moveX = clientX;\n\t\tthis.moveY = clientY;\n\t\tthis.options.onDrag();\n\t}\n\n\tprivate pointermove = (e: MouseEvent): void => {\n\t\tif (this.grabbed) {\n\t\t\tthis.drag(e);\n\t\t} else {\n\t\t\tconst { excludedElements, excludeFocusable } = this.options;\n\n\t\t\tconst excluded = [\n\t\t\t\t...((typeof excludedElements === 'function') ? excludedElements(this.el) : excludedElements),\n\t\t\t\t...((excludeFocusable) ? Array.from(getFocusable(this.el)) : []),\n\t\t\t].filter((el) => el && e.composedPath().includes(el));\n\n\t\t\tthis.canGrab = !excluded.some(Boolean);\n\t\t}\n\t};\n\n\tprivate moveWithKeyboard = (e: KeyboardEvent): void => {\n\t\tconst mod = e.shiftKey ? 20 : 1;\n\t\tconst step = mod * 1;\n\t\tlet left = 0;\n\t\tlet top = 0;\n\t\tswitch (e.key) {\n\t\t\tcase 'ArrowRight':\n\t\t\t\tleft = 5;\n\t\t\t\tbreak;\n\t\t\tcase 'ArrowLeft':\n\t\t\t\tleft = -5;\n\t\t\t\tbreak;\n\t\t\tcase 'ArrowDown':\n\t\t\t\ttop = 5;\n\t\t\t\tbreak;\n\t\t\tcase 'ArrowUp':\n\t\t\t\ttop = -5;\n\t\t\t\tbreak;\n\t\t\tcase 'Home':\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.resetPosition();\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\te.preventDefault();\n\t\tthis.move(left * step, top * step);\n\t};\n\n\tpublic static defaultOptions: Required<DraggableOptions> = {\n\t\texcludedElements: [],\n\t\texcludeFocusable: true,\n\n\t\tonDrag: noop,\n\t\tonGrab: noop,\n\t\tonMove: noop,\n\t\tonRelease: noop,\n\t};\n\n\tpublic static makeDraggable(\n\t\t{ el, keyboardEl, ...options }: DraggableOptionsRequired & DraggableOptions,\n\t): Draggable {\n\t\treturn new Draggable(el, keyboardEl, options);\n\t}\n}\n\nexport const { makeDraggable } = Draggable;\n","import { DescriptionAttribute, getDescription } from '../../utilities/description';\nimport { icons, createIcon } from '../../utilities/elements';\nimport { makeDraggable } from './draggable';\n\ntype ImageOverlayAnatomy =\n\t| 'overlay'\t\t\t// a <div> that wraps the <img> + <details>; used for positioning\n\t| 'image'\t\t\t// <img>\n\t| 'details'\t\t\t// <details>\n\t| 'summary'\t\t\t// <summary> (first child of <details>)\n\t| 'marker'\t\t\t// The first child of the <summary> (used instead of ::marker)\n\t| 'contents'\t\t// The second child of the <details> (next sibling of <summary>)\n\t| 'altText'\t\t\t// The first child <section> of the `contents`\n\t| 'description'\t\t// The second child <section> of the `contents`\n\ntype SummaryMarker = string | HTMLElement | SVGSVGElement;\ntype MarkerState = Record<'open' | 'closed', SummaryMarker>;\n\ninterface ImageOverlayClasses extends Partial<Record<ImageOverlayAnatomy, string>> {\n\tdraggable?: string;\n\tresizable?: string;\n\tdragging?: string;\n\tscreenReaderOnly?: string;\n}\n\nexport interface ImageOverlayOptions {\n\t/**\n\t * Indicates that the image's `alt` contents should be copied to the\n\t * <details> as its first child. This will be `aria-hidden` so that users\n\t * who read it on the image don't have to read it again.\n\t */\n\taddAltText?: boolean;\n\t/**\n\t * HTML string heading for the alt text section of the `<details>`. Only used\n\t * if `addAltText` is `true`. Default is `<h2>Alt Text</h2>`.\n\t */\n\taltSectionHeading?: string;\n\t/**\n\t * HTML string heading for the long description section of the `<details>`.\n\t * Default is `<h2>Image Description</h2>`.\n\t */\n\tdescriptionHeading?: string;\n\t/**\n\t * Indicates whether the summary's textual content should be visible. If\n\t * `false`, the summary text will be set as both the `aria-label` and `title`.\n\t */\n\tdisplaySummaryText?: boolean;\n\t/**\n\t * A custom `summary::marker` element. If included, it will be added as the\n\t * first child of the `<summary>` and will be accessible on the instance as\n\t * `ImageOverlayInstance.marker`.\n\t *\n\t * To specify a different element on open and close, pass an object with\n\t * `open` and `closed` values.\n\t */\n\tsummaryMarker?: SummaryMarker | MarkerState;\n\t/**\n\t * Where the `<details>` should be placed relative to the image in the DOM.\n\t *\n\t * `after-image` indicates `img + details`.\n\t *`before-image` indicates `details + img`.\n\t */\n\tdetailsPlacement?: 'after-image' | 'before-image';\n\t/** Text to display in the <summary> element. */\n\tsummaryText?: string | ((hasDescription: boolean) => string);\n\t/**\n\t * Indicates that the `Escape` key should close the `<details>`. Note that\n\t * `Escape` will always close the `details` if focus is on the `<summary>`.\n\t */\n\tcloseOnEscape?: boolean;\n}\n\ninterface EnhanceAllOptions extends ImageOverlayOptions, ImageOverlayClasses {\n\tselector?: string;\n}\n\nconst ImageOverlayInstances = new Set<ImageOverlay>();\n\nexport class ImageOverlay {\n\tpublic options: Required<ImageOverlayOptions & ImageOverlayClasses>;\n\tpublic image: HTMLImageElement;\n\tpublic description?: HTMLElement | null;\n\tpublic overlay!: HTMLElement;\n\tpublic details!: HTMLDetailsElement;\n\tpublic summary!: HTMLElement;\n\tpublic marker!: HTMLSpanElement;\n\tpublic contents!: HTMLElement;\n\tpublic altSection!: HTMLElement;\n\tpublic descriptionAttribute!: DescriptionAttribute | null;\n\tprivate originalImage!: HTMLImageElement;\n\tprivate enabled = false;\n\t// private hasAdjacentDetails = false;\n\t// private existingDetailsDescription = false;\n\n\tprotected constructor(\n\t\timage: HTMLImageElement,\n\t\toptions: ImageOverlay['options'],\n\t) {\n\t\tthis.image = image;\n\t\tthis.options = options;\n\n\t\tImageOverlayInstances.add(this);\n\t}\n\n\tpublic async enable(): Promise<void> {\n\t\tif (this.enabled) return;\n\n\t\tthis.originalImage = this.image.cloneNode() as HTMLImageElement;\n\n\t\tconst { attr, desc } = await getDescription(this.image);\n\t\tthis.descriptionAttribute = attr;\n\t\tthis.description = desc;\n\n\t\tconst { image, description, dragging } = this.options;\n\t\tif (this.description) this.description.classList.add(description);\n\t\tthis.image.classList.add(image);\n\n\t\tthis.overlay = this.createOverlay();\n\t\tthis.details = this.createDetails();\n\t\tthis.summary = this.createSummary();\n\t\tthis.marker = this.createMarker();\n\t\tthis.contents = this.createContents(this.details);\n\n\t\tmakeDraggable({\n\t\t\tel: this.details,\n\t\t\tkeyboardEl: this.summary,\n\t\t\tonDrag: () => {\n\t\t\t\tthis.details.classList.add(dragging);\n\t\t\t},\n\t\t\tonRelease: () => {\n\t\t\t\tthis.details.classList.remove(dragging);\n\t\t\t},\n\t\t});\n\n\t\tthis.details.addEventListener('toggle', this.onToggle);\n\t\tdocument.addEventListener('keydown', this.onDocumentKeydown);\n\n\t\tthis.enabled = true;\n\t}\n\n\tpublic disable(): this {\n\t\tif (!this.enabled) return this;\n\n\t\tthis.details.removeEventListener('toggle', this.onToggle);\n\t\tdocument.removeEventListener('keydown', this.onDocumentKeydown);\n\n\t\tthis.enabled = false;\n\t\treturn this;\n\t}\n\n\tpublic destroy(): this {\n\t\tif (this.enabled) this.disable();\n\t\t(this.overlay.parentNode || document).insertBefore(this.originalImage, this.overlay);\n\t\tthis.overlay.remove();\n\t\tImageOverlayInstances.delete(this);\n\t\treturn this;\n\t}\n\n\tprivate createOverlay(): HTMLElement {\n\t\tif (this.overlay && this.overlay instanceof HTMLElement) return this.overlay;\n\t\tconst { overlay: overlayClass } = this.options;\n\t\tconst { parentElement } = this.image;\n\t\tconst overlay = (\n\t\t\tparentElement instanceof HTMLElement && parentElement.classList.contains(overlayClass)\n\t\t) ? parentElement : document.createElement('div');\n\t\toverlay.classList.add(overlayClass);\n\t\tif (overlay.contains(this.image)) return overlay;\n\n\t\t// append to the document\n\t\t(parentElement || document).insertBefore(overlay, this.image);\n\t\toverlay.append(this.image);\n\n\t\treturn overlay;\n\t}\n\n\tprivate createDetails(): HTMLDetailsElement {\n\t\tif (this.details instanceof HTMLDetailsElement) return this.details;\n\t\tconst { detailsPlacement, screenReaderOnly, details: detailsClass } = this.options;\n\n\t\tif (this.description) {\n\t\t\tif (this.description instanceof HTMLDetailsElement) {\n\t\t\t\t// this.existingDetailsDescription = true;\n\t\t\t}\n\t\t\tif (screenReaderOnly && this.description.classList.contains(screenReaderOnly)) {\n\t\t\t\tthis.description.classList.remove(screenReaderOnly);\n\t\t\t}\n\t\t}\n\n\t\tconst { nextElementSibling } = this.image;\n\n\t\t// next element is a <details>\n\t\tif (nextElementSibling && nextElementSibling instanceof HTMLDetailsElement) {\n\t\t\t// this.hasAdjacentDetails = true;\n\t\t\t// next element is the description or contains it\n\t\t\tif (\n\t\t\t\tthis.description\n\t\t\t\t&& (nextElementSibling === this.description\n\t\t\t\t|| nextElementSibling.contains(this.description))\n\t\t\t) {\n\t\t\t\tnextElementSibling.classList.add(detailsClass);\n\t\t\t\treturn nextElementSibling;\n\t\t\t}\n\t\t\t// TODO: handle adjacent <details> that aren't the description?\n\t\t}\n\n\t\tconst details = document.createElement('details');\n\t\tdetails.classList.add(detailsClass);\n\n\t\t// add to the document\n\t\tconst refChild = (detailsPlacement === 'after-image')\n\t\t\t? this.image.nextSibling : this.image;\n\t\t(this.image.parentNode || document).insertBefore(details, refChild);\n\n\t\treturn details;\n\t}\n\n\tprivate createSummary(): HTMLElement {\n\t\tconst { summary: summaryClass, displaySummaryText, summaryText } = this.options;\n\t\tconst existingSummary = this.details.querySelector<HTMLElement>('summary');\n\t\tif (existingSummary) {\n\t\t\texistingSummary.classList.add(summaryClass);\n\t\t\treturn existingSummary;\n\t\t}\n\n\t\tconst summary = document.createElement('summary');\n\t\tsummary.classList.add(summaryClass);\n\n\t\tconst text = (typeof summaryText === 'string')\n\t\t\t? summaryText\n\t\t\t: summaryText(Boolean(this.description));\n\t\tif (displaySummaryText) {\n\t\t\tsummary.append(text);\n\t\t} else {\n\t\t\tsummary.setAttribute('aria-label', text);\n\t\t\tsummary.setAttribute('title', text);\n\t\t}\n\n\t\t// add to the document\n\t\tthis.details.prepend(summary);\n\n\t\treturn summary;\n\t}\n\n\tprivate createMarker(): HTMLSpanElement {\n\t\tconst { marker: markerClass } = this.options;\n\t\tconst marker = document.createElement('span');\n\t\tmarker.classList.add(markerClass);\n\n\t\t// add to the document\n\t\tthis.summary.prepend(this.updateMarker(marker));\n\n\t\treturn marker;\n\t}\n\n\tprivate updateMarker(marker = this.marker): HTMLSpanElement {\n\t\tconst { summaryMarker } = this.options;\n\t\tif (typeof summaryMarker === 'object' && 'open' in summaryMarker) {\n\t\t\t// remove current child and add the updated one\n\t\t\twhile (marker.firstChild) marker.firstChild.remove();\n\t\t\tconst { open, closed } = summaryMarker;\n\t\t\tmarker.append((this.details.open) ? open : closed);\n\t\t\treturn marker;\n\t\t}\n\t\tif (!marker.children.length) marker.append(summaryMarker);\n\t\treturn marker;\n\t}\n\n\tprivate createContents(details: NonNullable<ImageOverlay['details']>): HTMLDivElement {\n\t\tconst { addAltText, contents: contentsClass } = this.options;\n\t\tconst contents = document.createElement('div');\n\t\tcontents.classList.add(contentsClass);\n\n\t\tconst descSection = this.createDescSection();\n\n\t\tif (addAltText) contents.append(this.createAltSection());\n\t\tif (descSection) contents.append(descSection);\n\n\t\t// add to the details\n\t\tdetails.append(contents);\n\n\t\treturn contents;\n\t}\n\n\tprivate createAltSection(): HTMLElement {\n\t\tconst { altText: altClass, altSectionHeading } = this.options;\n\t\tconst section = document.createElement('section');\n\t\tsection.classList.add(altClass);\n\t\tsection.setAttribute('aria-hidden', 'true');\n\t\tsection.innerHTML = `${altSectionHeading}<p>${this.image.alt}</p>`;\n\t\treturn section;\n\t}\n\n\tprivate createDescSection(): HTMLElement | null {\n\t\tif (!this.description) return null;\n\t\tconst { descriptionHeading, description: descClass } = this.options;\n\t\tconst section = document.createElement('section');\n\t\tsection.classList.add(descClass);\n\t\tsection.innerHTML = descriptionHeading;\n\t\tsection.append(this.description);\n\t\treturn section;\n\t}\n\n\tprivate onToggle = (): void => {\n\t\tconst { draggable, resizable } = this.options;\n\t\tif (this.details.open) {\n\t\t\tthis.details.classList.add(draggable);\n\t\t\tthis.details.classList.add(resizable);\n\t\t} else {\n\t\t\tthis.details.classList.remove(draggable);\n\t\t\tthis.details.classList.remove(resizable);\n\t\t\tthis.details.removeAttribute('style');\n\t\t}\n\t\tthis.updateMarker();\n\t}\n\n\tprivate onDocumentKeydown = (e: KeyboardEvent): void => {\n\t\tif (e.key !== 'Escape') return;\n\n\t\tconst { closeOnEscape } = this.options;\n\t\tif (closeOnEscape) this.details.open = false;\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: Partial<ImageOverlay['options']>,\n\t): Promise<ImageOverlay | null> {\n\t\tconst opts = {\n\t\t\t...ImageOverlay.defaultOptions,\n\t\t\t...ImageOverlay.defaultClasses,\n\t\t\t...options,\n\t\t};\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageOverlay(image, opts);\n\t\tawait instance.enable();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll({\n\t\tselector = ImageOverlay.selector,\n\t\t...options\n\t}: EnhanceAllOptions = {}): Promise<typeof ImageOverlay.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageOverlay.enhance(el, options)));\n\t\treturn ImageOverlay.instances;\n\t}\n\n\tpublic static selector = 'img';\n\n\tpublic static get instances(): ImageOverlay[] {\n\t\treturn Array.from(ImageOverlayInstances);\n\t}\n\n\tpublic static baseName = 'overlaid';\n\n\tpublic static defaultClasses: Required<ImageOverlayClasses> = {\n\t\toverlay: ImageOverlay.baseName,\n\t\timage: `${ImageOverlay.baseName}__image`,\n\t\tdetails: `${ImageOverlay.baseName}__details`,\n\t\tsummary: `${ImageOverlay.baseName}__summary`,\n\t\tmarker: `${ImageOverlay.baseName}__marker`,\n\t\tcontents: `${ImageOverlay.baseName}__contents`,\n\t\taltText: `${ImageOverlay.baseName}__alt`,\n\t\tdescription: `${ImageOverlay.baseName}__desc`,\n\t\tdraggable: `${ImageOverlay.baseName}--draggable`,\n\t\tresizable: `${ImageOverlay.baseName}--resizable`,\n\t\tdragging: 'dragging',\n\t\tscreenReaderOnly: 'sr-only',\n\t}\n\n\tpublic static defaultOptions: Required<ImageOverlayOptions> = {\n\t\taddAltText: true,\n\t\taltSectionHeading: '<h2>Alt Text</h2>',\n\t\tdescriptionHeading: '<h2>Image Description</h2>',\n\t\tdetailsPlacement: 'after-image',\n\t\t// getter used for summaryMarker so that icon elements are cloned\n\t\tget summaryMarker() {\n\t\t\treturn {\n\t\t\t\topen: createIcon(icons.close),\n\t\t\t\tclosed: createIcon(icons.details),\n\t\t\t};\n\t\t},\n\t\tsummaryText: (hasDescription: boolean): string => {\n\t\t\tlet text = 'Description';\n\t\t\tif (!hasDescription) text += ' (Only alt text)';\n\t\t\treturn text;\n\t\t},\n\t\tdisplaySummaryText: false,\n\t\tcloseOnEscape: true,\n\t}\n}\n","export * from './enhancements/ImageModal';\nexport * from './enhancements/ImageOverlay';\n","import { ImageOverlay } from '../../src';\n\nImageOverlay.enhanceAll().then(console.log);\n"]}