{"mappings":"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","sources":["./src/utilities/description.ts","./src/utilities/elements.ts","./src/utilities/index.ts","./src/enhancements/ImageDetails/index.ts","./src/enhancements/ImageOverlay/draggable.ts","./src/enhancements/ImageOverlay/defaultIcons.ts","./src/enhancements/ImageOverlay/index.ts","./src/enhancements/ImageModal/index.ts","./site/image-overlay/index.ts"],"sourcesContent":["const omitTags = (...tagNames: string[]) => (n: Node): boolean => {\n\tif (n instanceof HTMLElement) {\n\t\treturn !tagNames.some((tagName) => tagName.toUpperCase() === n.tagName.toUpperCase());\n\t}\n\treturn true;\n};\n\ntype NodeFilter = (n: Node) => boolean;\n\nconst filterNode = <T extends Node = HTMLElement>(\n\tnode: T | null,\n\tfilters: NodeFilter[],\n): T | null => ((node && filters.some((test) => test(node))) ? node : null);\n\n/**\n * Fetch an element from a given url. If the URL is a whole document, the entire\n * body will be returned inside a `DocumentFragment`. Returns `null` if nothing\n * is found.\n */\nexport const fetchElement = async (\n\turl: string,\n\tinit?: Parameters<typeof fetch>[1],\n\tfilters: NodeFilter[] = [\n\t\tomitTags('script', 'style'),\n\t],\n): Promise<HTMLElement | DocumentFragment | null> => {\n\tconst req = new Request(url);\n\tconst { hash, origin, pathname } = new URL(req.url);\n\tconst currentPage = window.location.origin + window.location.pathname;\n\n\t// same-page reference\n\tif ((origin + pathname) === currentPage) {\n\t\treturn filterNode<HTMLElement>(document.querySelector(hash), filters);\n\t}\n\n\t// reference to another page\n\tconst res = await fetch(req, init);\n\tif (res.status === 200) {\n\t\tconst html = await res.text();\n\n\t\tconst parser = new DOMParser();\n\t\tconst doc = parser.parseFromString(html, 'text/html');\n\n\t\t// a fragment on another page\n\t\tif (hash) {\n\t\t\treturn filterNode<HTMLElement>(document.querySelector(hash), filters);\n\t\t}\n\n\t\t// the body doesn't have any contents\n\t\tif (doc.body.firstChild === null) return null;\n\n\t\tconst contents = new DocumentFragment();\n\t\tArray.from(doc.body.childNodes).forEach((node) => {\n\t\t\tif (filters.some((test) => test(node))) {\n\t\t\t\tcontents.append(node);\n\t\t\t}\n\t\t});\n\t\treturn contents;\n\t}\n\n\treturn null;\n};\n\n/* eslint-disable no-shadow */\n/** All of the HTML attributes that can be used to reference a description. */\nexport enum DescriptionAttribute {\n\tARIA_DETAILS = 'aria-details',\n\tARIA_DESCRIBEDBY = 'aria-describedby',\n\tLONGDESC = 'longdesc',\n}\n/* eslint-enable no-shadow */\n\nexport interface Description {\n\tattr: DescriptionAttribute | null;\n\tvalue: HTMLElement | null;\n}\n\nexport const getDescriptionByAttr = async (\n\tel: HTMLElement,\n\tattr: DescriptionAttribute,\n): Promise<HTMLElement | null> => {\n\tconst attrValue = el.getAttribute(attr);\n\tif (!el.hasAttribute(attr) || !attrValue) return null;\n\n\t// longdesc: retrieve the description from a separate document\n\tif (attr === DescriptionAttribute.LONGDESC) {\n\t\tconst contents = await fetchElement(attrValue);\n\t\tif (contents instanceof DocumentFragment) {\n\t\t\tconst desc = document.createElement('div');\n\t\t\tdesc.append(contents);\n\t\t\treturn desc;\n\t\t}\n\t\treturn contents;\n\t}\n\n\tconst ref = document.getElementById(attrValue);\n\tif (ref) return ref.cloneNode(true) as HTMLElement;\n\treturn null;\n};\n\n/**\n * Get the image's long description.\n * Look for description attributes on the image and return the value of the\n * description. Attribute preference is `aria-details` > `longdesc` >\n * `aria-describedby`.\n */\nexport const getDescription = async (el: HTMLElement): Promise<Description[]> => Promise.all(\n\tObject.values(DescriptionAttribute)\n\t\t.filter((attr) => el.hasAttribute(attr))\n\t\t.map(async (attr) => ({\n\t\t\tattr,\n\t\t\tvalue: await getDescriptionByAttr(el, attr),\n\t\t})),\n);\n","export const focusableSelectors = [\n\t'[contentEditable=true]:not([tabindex=\"-1\"])',\n\t'[tabindex]:not([tabindex=\"-1\"])',\n\t'a[href]:not([tabindex=\"-1\"])',\n\t'button:not([disabled]):not([tabindex=\"-1\"])',\n\t'dialog',\n\t'embed:not([tabindex=\"-1\"])',\n\t'iframe:not([tabindex=\"-1\"])',\n\t'input:not([disabled]):not([tabindex=\"-1\"])',\n\t'map[name] area[href]:not([tabindex=\"-1\"])',\n\t'object:not([tabindex=\"-1\"])',\n\t'select:not([disabled]):not([tabindex=\"-1\"])',\n\t'summary:not([tabindex=\"-1\"])',\n\t'textarea:not([disabled]):not([tabindex=\"-1\"])',\n];\n\nexport const getFocusable = (\n\tel: HTMLElement | Document | ShadowRoot = document,\n): NodeListOf<HTMLElement> => el.querySelectorAll(focusableSelectors.join(','));\n\nexport const appendContent = (to: HTMLElement, ...contents: (string | Node)[]): void => {\n\tcontents.forEach((content) => {\n\t\tif (typeof content === 'string') {\n\t\t\tconst div = document.createElement('div');\n\t\t\tdiv.innerHTML = content;\n\t\t\tto.append(div.firstChild as ChildNode);\n\t\t} else {\n\t\t\tto.append(content);\n\t\t}\n\t});\n};\n","export * from './description';\nexport * from './elements';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = (): void => {};\n\nconst styleString = (\n\tstyle: Record<string, string | null>,\n): string => Object.keys(style).reduce((a, attr) => {\n\tconst val = style[attr];\n\treturn (val) ? `${a} ${attr}: ${val};` : a;\n}, '').trim();\n\nexport const setStyle = (el: HTMLElement, style: Parameters<typeof styleString>[0]): void => {\n\tel.setAttribute('style', styleString(style));\n};\n","import {\n\tDescriptionAttribute,\n\tDescription,\n\tgetDescription,\n\tappendContent,\n\tnoop,\n} from '../../utilities';\n\nexport interface ImageDetailsOptions {\n\t/**\n\t * Indicates that the image's `alt` contents should be copied to the\n\t * <details> as its first child. This will be `aria-hidden` so that users\n\t * who read it on the image don't have to read it again.\n\t */\n\taddAltText?: boolean;\n\t/**\n\t * Where the `<details>` should be placed relative to the image in the DOM.\n\t *\n\t * * `after-image` indicates `img + details`.\n\t * * `before-image` indicates `details + img`.\n\t */\n\tdetailsPlacement?: 'after-image' | 'before-image';\n\t/**\n\t * Indicates whether the summary's textual content should be visible. If\n\t * `false`, the summary text will be set as both the `aria-label` and `title`.\n\t */\n\tdisplaySummaryText?: boolean;\n\t/**\n\t * Indicates that the `Escape` key should close the `<details>`. Note that\n\t * `Escape` will always close the `details` if focus is on the `<summary>`.\n\t */\n\tcloseOnEscape?: boolean;\n\t/**\n\t * HTML string heading for the alt text section of the `<details>`. Only used\n\t * if `addAltText` is `true`. Default is `<h2>Alt Text</h2>`.\n\t */\n\taltSectionHeading?: () => string | HTMLElement;\n\t/**\n\t * HTML string heading for the long description section of the `<details>`.\n\t * Default is `<h2>Image Description</h2>`.\n\t */\n\tdescriptionHeading?: () => string | HTMLElement;\n\t/**\n\t * A custom `summary::marker` element. If included, it will be added as the\n\t * first child of the `<summary>` and will be accessible on the instance as\n\t * `ImageDetailsInstance.marker`.\n\t *\n\t * To specify a different element on open and close, pass an object with\n\t * `open` and `closed` values.\n\t */\n\tsummaryMarker?: () => string | HTMLElement | SVGSVGElement | null;\n\t/** Text to display in the <summary> element. */\n\tsummaryText?: (\n\t\t/** Indicates whether a long description exists. */\n\t\thasDescription: boolean\n\t) => string;\n\t/**\n\t * The class for the `<div>` that wraps the `<img> + <details>`. This will\n\t * also be used as the \"block\" name in the BEM class naming for child elements.\n\t */\n\tblockName?: string;\n\tonGetDescription?: (descriptions: Description[]) => void;\n}\n\nexport class ImageDetails {\n\tpublic description?: string | Node | null;\n\tpublic container: HTMLElement;\n\tpublic details: HTMLDetailsElement;\n\tpublic summary!: HTMLElement;\n\tpublic marker!: HTMLSpanElement;\n\tpublic contents!: HTMLDivElement;\n\tpublic descriptionSection: HTMLElement | null = null;\n\tpublic descriptionAttribute: DescriptionAttribute | null = null;\n\tprivate originalImage: HTMLImageElement;\n\tprivate originalDetails: HTMLDetailsElement | null = null;\n\tprivate descriptionAdded = false;\n\t// private hasAdjacentDetails = false;\n\t// private existingDetailsDescription = false;\n\n\tprivate static Instances = new Set<ImageDetails>();\n\tpublic static baseName = 'image-details';\n\tpublic static defaultOptions: Required<ImageDetailsOptions> = {\n\t\taddAltText: true,\n\t\tdetailsPlacement: 'after-image',\n\t\tdisplaySummaryText: true,\n\t\tcloseOnEscape: true,\n\t\taltSectionHeading: () => '<h2>Short description</h2>',\n\t\tdescriptionHeading: () => '<h2>Long description</h2>',\n\t\tsummaryMarker: () => null,\n\t\tsummaryText: (hasDescription: boolean): string => {\n\t\t\tlet text = 'Description';\n\t\t\tif (!hasDescription) text += ' (only alt text)';\n\t\t\treturn text;\n\t\t},\n\n\t\tblockName: 'image-details',\n\n\t\tonGetDescription: noop,\n\t}\n\n\tprotected constructor(\n\t\tpublic image: HTMLImageElement,\n\t\tpublic options: Required<ImageDetailsOptions>,\n\t) {\n\t\tthis.originalImage = this.image.cloneNode(true) as HTMLImageElement;\n\n\t\tthis.image.classList.add(this.getClass('image'));\n\n\t\tthis.container = this.createContainer();\n\t\tthis.details = this.createDetails();\n\n\t\tthis.container.append(this.image, this.details);\n\n\t\tImageDetails.Instances.add(this);\n\t}\n\n\tpublic get hasDescription(): boolean {\n\t\treturn Object.values(DescriptionAttribute)\n\t\t\t.some((attr) => this.image.getAttribute(attr));\n\t}\n\n\tpublic async addDescription(description?: string | Node): Promise<void> {\n\t\tif (this.descriptionAdded) return;\n\t\tconst { descriptionHeading, onGetDescription = noop } = this.options;\n\n\t\tif (description) {\n\t\t\tthis.description = description;\n\t\t} else {\n\t\t\tconst descriptions = await getDescription(this.image);\n\t\t\tonGetDescription.call(this, descriptions);\n\t\t\tif (descriptions.length) {\n\t\t\t\tconst [{ attr, value }] = descriptions;\n\t\t\t\tthis.descriptionAttribute = attr;\n\t\t\t\tthis.description = value;\n\t\t\t}\n\t\t}\n\n\t\tif (this.description && this.descriptionSection) {\n\t\t\tappendContent(this.descriptionSection, descriptionHeading(), this.description);\n\t\t\tthis.descriptionAdded = true;\n\t\t}\n\t}\n\n\tpublic destroy(): this {\n\t\t(this.container.parentNode || document).insertBefore(this.originalImage, this.container);\n\t\tif (this.originalDetails) {\n\t\t\tconst { detailsPlacement } = this.options;\n\t\t\tconst refChild = (detailsPlacement === 'after-image')\n\t\t\t\t? this.originalImage.nextSibling\n\t\t\t\t: this.originalImage;\n\t\t\t(this.originalImage.parentNode || document).insertBefore(this.originalDetails, refChild);\n\t\t}\n\t\tthis.container.remove();\n\t\tImageDetails.Instances.delete(this);\n\t\treturn this;\n\t}\n\n\t// element constructors\n\n\tprivate createContainer(): HTMLElement {\n\t\tif (this.container) return this.container;\n\t\tconst { blockName } = this.options;\n\t\tconst { parentElement } = this.image;\n\t\tconst container = (\n\t\t\tparentElement instanceof HTMLElement && parentElement.classList.contains(blockName)\n\t\t) ? parentElement : document.createElement('div');\n\t\tcontainer.classList.add(blockName);\n\t\tif (container.contains(this.image)) return container;\n\n\t\t// append to the document\n\t\t(parentElement || document).insertBefore(container, this.image);\n\n\t\treturn container;\n\t}\n\n\tprivate createDetails(): HTMLDetailsElement {\n\t\tif (this.details) return this.details;\n\t\tconst { detailsPlacement } = this.options;\n\n\t\tlet details = document.createElement('details');\n\n\t\tconst detailsCandidate = (detailsPlacement === 'after-image')\n\t\t\t? this.image.nextElementSibling\n\t\t\t: this.image.previousElementSibling;\n\n\t\tif (detailsCandidate instanceof HTMLDetailsElement) {\n\t\t\t// `img + details` already exists so use it, storing a copy of the original\n\t\t\tthis.originalDetails = detailsCandidate.cloneNode(true) as HTMLDetailsElement;\n\t\t\tdetails = detailsCandidate;\n\t\t} else {\n\t\t\t// add the new details to the document\n\t\t\tconst refChild = (detailsPlacement === 'after-image')\n\t\t\t\t? this.image.nextSibling : this.image;\n\t\t\t(this.image.parentNode || document).insertBefore(details, refChild);\n\n\t\t\t// create the summary\n\t\t\tthis.summary = this.createSummary();\n\t\t\tdetails.prepend(this.summary);\n\n\t\t\t// create the summary marker\n\t\t\tthis.marker = this.createMarker();\n\t\t\tthis.summary.prepend(this.marker);\n\n\t\t\t// create the contents\n\t\t\tthis.contents = this.createContents();\n\t\t\tdetails.append(this.contents);\n\t\t}\n\n\t\tdetails.classList.add(this.getClass('details'));\n\n\t\treturn details;\n\t}\n\n\tprivate createSummary(): HTMLElement {\n\t\tconst { displaySummaryText, summaryText } = this.options;\n\n\t\tconst summary = document.createElement('summary');\n\t\tsummary.classList.add(this.getClass('summary'));\n\t\tconst text = summaryText(this.hasDescription);\n\t\tif (!displaySummaryText) {\n\t\t\tsummary.setAttribute('aria-label', text);\n\t\t\tsummary.setAttribute('title', text);\n\t\t} else {\n\t\t\tconst span = document.createElement('span');\n\t\t\tappendContent(span, text);\n\t\t\tsummary.append(span);\n\t\t}\n\n\t\treturn summary;\n\t}\n\n\tprivate createMarker(): HTMLSpanElement {\n\t\tconst { summaryMarker } = this.options;\n\n\t\tconst innerMarker = summaryMarker();\n\t\tconst marker = document.createElement('span');\n\t\tmarker.classList.add(this.getClass('marker'));\n\t\tif (innerMarker) marker.append(innerMarker);\n\n\t\treturn marker;\n\t}\n\n\tprivate createContents(): HTMLDivElement {\n\t\tconst { addAltText } = this.options;\n\n\t\tconst contents = document.createElement('div');\n\t\tcontents.classList.add(this.getClass('contents'));\n\t\tif (addAltText) contents.append(this.createAltSection());\n\t\tcontents.append(this.createDescriptionSection());\n\n\t\treturn contents;\n\t}\n\n\tprivate createAltSection(): HTMLElement {\n\t\tconst { altSectionHeading } = this.options;\n\t\tconst section = document.createElement('section');\n\t\tsection.classList.add(this.getClass('alt'));\n\t\tsection.setAttribute('aria-hidden', 'true');\n\t\tappendContent(section, altSectionHeading(), `<p>${this.image.alt}</p>`);\n\t\treturn section;\n\t}\n\n\tprivate createDescriptionSection(): HTMLElement {\n\t\tconst section = document.createElement('section');\n\t\tsection.classList.add(this.getClass('desc'));\n\t\tthis.descriptionSection = section;\n\t\treturn section;\n\t}\n\n\tpublic updateMarker(marker: ReturnType<NonNullable<ImageDetailsOptions['summaryMarker']>>): this {\n\t\twhile (this.marker.firstChild) {\n\t\t\tthis.marker.removeChild(this.marker.firstChild);\n\t\t}\n\t\tif (marker) this.marker.append(marker);\n\t\treturn this;\n\t}\n\n\tprivate getClass(element: string, asSelector = false): string {\n\t\tconst { blockName } = this.options;\n\t\tconst className = `${blockName}__${element}`;\n\t\tif (asSelector) return `.${className}`;\n\t\treturn className;\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: ImageDetailsOptions,\n\t): Promise<ImageDetails | null> {\n\t\tconst opts = { ...ImageDetails.defaultOptions, ...options };\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageDetails(image, opts);\n\t\tawait instance.addDescription();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll(\n\t\t{ selector = 'img', ...options }: ImageDetailsOptions & { selector?: string } = {},\n\t): Promise<typeof ImageDetails.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageDetails.enhance(el, options)));\n\t\treturn ImageDetails.instances;\n\t}\n\n\tpublic static get instances(): ImageDetails[] {\n\t\treturn Array.from(ImageDetails.Instances);\n\t}\n}\n","import { getFocusable, setStyle, noop } from '../../utilities';\n\nexport interface DraggablePosition {\n\ttop: number | null;\n\tleft: number | null;\n}\n\ninterface DraggableOptions {\n\t/**\n\t * A list of elements that will not initiate the `grab` action, which begins\n\t * the element dragging.\n\t */\n\texcludedElements?: HTMLElement[] | ((draggableElement: HTMLElement) => HTMLElement[]);\n\t/**\n\t * Indicates that all focusable/interactive elements inside the draggable\n\t * element should not initiate dragging. Default is `true`.\n\t */\n\texcludeFocusable?: boolean;\n\n\tonDrag?: () => void;\n\tonGrab?: () => void;\n\tonMove?: () => void;\n\tonRelease?: () => void;\n}\n\nexport class Draggable {\n\tpublic options: Required<DraggableOptions>;\n\tprivate moveX = 0;\n\tprivate moveY = 0;\n\tprivate canGrab = false;\n\tprivate grabbed = false;\n\n\tprotected constructor(\n\t\tpublic el: HTMLElement,\n\t\tpublic keyboardEl: HTMLElement | null,\n\t\toptions?: Partial<DraggableOptions>,\n\t) {\n\t\tthis.options = { ...Draggable.defaultOptions, ...options };\n\n\t\tthis.el.addEventListener('pointerdown', this.grab);\n\t\tthis.el.addEventListener('pointerleave', this.release);\n\t\tthis.el.addEventListener('pointermove', this.pointermove);\n\t\tthis.el.addEventListener('pointerup', this.release);\n\n\t\tif (this.keyboardEl) {\n\t\t\tthis.keyboardEl.addEventListener('keydown', this.moveWithKeyboard);\n\t\t}\n\t}\n\n\tpublic move(x: number, y: number): void {\n\t\tconst { top, left } = this.pos;\n\t\tif (top !== null && left !== null) {\n\t\t\tsetStyle(this.el, {\n\t\t\t\tposition: 'absolute',\n\t\t\t\tleft: `${left + x}px`,\n\t\t\t\ttop: `${top + y}px`,\n\t\t\t});\n\t\t}\n\t\tthis.options.onMove();\n\t}\n\n\tpublic resetPosition(): void {\n\t\tsetStyle(this.el, {\n\t\t\tposition: null,\n\t\t\ttop: null,\n\t\t\tleft: null,\n\t\t});\n\t}\n\n\tpublic get pos(): DraggablePosition {\n\t\tconst { top = '0', left = '0' } = window.getComputedStyle(this.el);\n\t\treturn {\n\t\t\ttop: (top === 'auto') ? null : parseInt(top, 10),\n\t\t\tleft: (top === 'auto') ? null : parseInt(left, 10),\n\t\t};\n\t}\n\n\tprivate grab = (e: MouseEvent): void => {\n\t\tif (!this.canGrab) return;\n\n\t\tthis.moveX = e.clientX;\n\t\tthis.moveY = e.clientY;\n\t\tthis.grabbed = true;\n\t\tthis.options.onGrab();\n\t};\n\n\tprivate release = (): void => {\n\t\tthis.moveX = 0;\n\t\tthis.moveY = 0;\n\t\tthis.grabbed = false;\n\t\tthis.options.onRelease();\n\t};\n\n\tprivate drag = ({ clientX, clientY }: MouseEvent): void => {\n\t\tthis.move(clientX - this.moveX, clientY - this.moveY);\n\t\tthis.moveX = clientX;\n\t\tthis.moveY = clientY;\n\t\tthis.options.onDrag();\n\t}\n\n\tprivate pointermove = (e: MouseEvent): void => {\n\t\tif (this.grabbed) {\n\t\t\tthis.drag(e);\n\t\t} else {\n\t\t\tconst { excludedElements, excludeFocusable } = this.options;\n\n\t\t\tconst excluded = [\n\t\t\t\t...((typeof excludedElements === 'function') ? excludedElements(this.el) : excludedElements),\n\t\t\t\t...((excludeFocusable) ? Array.from(getFocusable(this.el)) : []),\n\t\t\t].filter((el) => el && e.composedPath().includes(el));\n\n\t\t\tthis.canGrab = !excluded.some(Boolean);\n\t\t}\n\t};\n\n\tprivate moveWithKeyboard = (e: KeyboardEvent): void => {\n\t\tconst mod = e.shiftKey ? 20 : 1;\n\t\tconst pos = Draggable.getKeyboardPosition(e.key, 5 * mod);\n\t\tif (!pos) return;\n\t\te.preventDefault();\n\t\tif (pos === 'reset') this.resetPosition();\n\t\telse {\n\t\t\tconst { left, top } = pos;\n\t\t\tthis.move(left, top);\n\t\t}\n\t};\n\n\tprivate static getKeyboardPosition(\n\t\tkey: KeyboardEvent['key'],\n\t\tstep: number,\n\t): { top: number; left: number } | 'reset' | null {\n\t\tswitch (key) {\n\t\t\tcase 'ArrowRight': return { left: step, top: 0 };\n\t\t\tcase 'ArrowLeft': return { left: -step, top: 0 };\n\t\t\tcase 'ArrowDown': return { left: 0, top: step };\n\t\t\tcase 'ArrowUp': return { left: 0, top: -step };\n\t\t\tcase 'Home': return 'reset';\n\t\t\tdefault: return null;\n\t\t}\n\t}\n\n\tpublic static defaultOptions: Required<DraggableOptions> = {\n\t\texcludedElements: [],\n\t\texcludeFocusable: true,\n\n\t\tonDrag: noop,\n\t\tonGrab: noop,\n\t\tonMove: noop,\n\t\tonRelease: noop,\n\t};\n\n\tpublic static makeDraggable = ({ el, keyboardEl, ...options }: DraggableOptions & {\n\t\tel: HTMLElement;\n\t\tkeyboardEl: HTMLElement | null;\n\t}): Draggable => new Draggable(el, keyboardEl, options);\n}\n\nexport const { makeDraggable } = Draggable;\n","export const iconPath = {\n\t/** https://material.io/resources/icons/?icon=details&style=baseline */\n\tdetails: 'M3 4l9 16 9-16H3zm3.38 2h11.25L12 16 6.38 6z',\n\t/** https://material.io/resources/icons/?icon=close&style=baseline */\n\tclose: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z',\n\t/** https://material.io/resources/icons/?icon=north_east&style=baseline */\n\tnorthEast: 'M9,5v2h6.59L4,18.59L5.41,20L17,8.41V15h2V5H9z',\n};\n\nexport const createIcon = (isOpen = false): SVGSVGElement => {\n\tconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\tsvg.setAttribute('role', 'img');\n\tsvg.setAttribute('viewBox', '0 0 24 24');\n\tsvg.setAttribute('focusable', 'false');\n\tsvg.setAttribute('aria-hidden', 'true');\n\n\tconst path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\tpath.setAttribute('fill', 'currentColor');\n\tpath.setAttribute('d', (isOpen) ? iconPath.close : iconPath.northEast);\n\n\tsvg.append(path);\n\treturn svg;\n};\n","import { ImageDetails, ImageDetailsOptions } from '../ImageDetails';\nimport { DescriptionAttribute, Description, noop } from '../../utilities';\nimport { makeDraggable } from './draggable';\nimport { createIcon } from './defaultIcons';\n\nexport interface ImageOverlayOptions {\n\t/**\n\t * Indicates that the `Escape` key should close all `<details>`. Note that\n\t * `Escape` will always close the `details` if focus is on the `<summary>`.\n\t */\n\tcloseAllOnEscape?: boolean;\n\tdraggableClass?: string;\n\tdraggingClass?: string;\n\tresizableClass?: string;\n\tonGetDescription?: (descriptions: Description[]) => void;\n\tmarker?: ImageDetailsOptions['summaryMarker'] | Record<'open' | 'closed', ImageDetailsOptions['summaryMarker']>;\n}\n\nexport class ImageOverlay {\n\tprivate enabled = false;\n\tpublic ImageDetails: ImageDetails | null = null;\n\n\tprivate static Instances = new Set<ImageOverlay>();\n\n\tpublic static defaultOptions: Required<ImageOverlayOptions> = {\n\t\tcloseAllOnEscape: true,\n\t\tdraggingClass: 'dragging',\n\t\tdraggableClass: 'draggable',\n\t\tresizableClass: 'resizable',\n\t\tonGetDescription: noop,\n\t\tmarker: {\n\t\t\topen: createIcon.bind(null, true),\n\t\t\tclosed: createIcon.bind(null, false),\n\t\t},\n\t}\n\n\tprotected constructor(\n\t\tpublic image: HTMLImageElement,\n\t\tpublic options: Required<ImageOverlayOptions>,\n\t) {\n\t\tImageOverlay.Instances.add(this);\n\t}\n\n\tprivate get markerOpen(): string | HTMLElement | SVGSVGElement | null {\n\t\tconst { marker } = this.options;\n\t\tif ('open' in marker && typeof marker.open === 'function') return marker.open();\n\t\tif (typeof marker === 'function') return marker();\n\t\treturn null;\n\t}\n\n\tprivate get markerClosed(): string | HTMLElement | SVGSVGElement | null {\n\t\tconst { marker } = this.options;\n\t\tif ('closed' in marker && typeof marker.closed === 'function') return marker.closed();\n\t\tif (typeof marker === 'function') return marker();\n\t\treturn null;\n\t}\n\n\tpublic async enable(): Promise<void> {\n\t\tif (this.enabled) return;\n\n\t\tconst { onGetDescription, draggingClass } = this.options;\n\n\t\tthis.ImageDetails = await ImageDetails.enhance(this.image, {\n\t\t\tblockName: 'overlaid',\n\t\t\tdisplaySummaryText: false,\n\t\t\tsummaryMarker: () => this.markerClosed,\n\t\t\tonGetDescription,\n\t\t});\n\n\t\tif (!this.ImageDetails) return;\n\n\t\tconst { details, summary } = this.ImageDetails;\n\n\t\tmakeDraggable({\n\t\t\tel: details,\n\t\t\tkeyboardEl: summary,\n\t\t\tonDrag: () => {\n\t\t\t\tdetails.classList.add(draggingClass);\n\t\t\t},\n\t\t\tonRelease: () => {\n\t\t\t\tdetails.classList.remove(draggingClass);\n\t\t\t},\n\t\t});\n\n\t\tdetails.addEventListener('toggle', this.onToggle);\n\t\tdocument.addEventListener('keydown', this.onDocumentKeydown);\n\n\t\tthis.enabled = true;\n\t}\n\n\tpublic disable(): this {\n\t\tif (!this.enabled || !this.ImageDetails) return this;\n\t\tconst { details } = this.ImageDetails;\n\t\tdetails.removeEventListener('toggle', this.onToggle);\n\t\tdocument.removeEventListener('keydown', this.onDocumentKeydown);\n\t\tthis.enabled = false;\n\t\treturn this;\n\t}\n\n\tpublic destroy(): this {\n\t\tif (this.enabled) this.disable();\n\t\tif (this.ImageDetails) this.ImageDetails.destroy();\n\t\tImageOverlay.Instances.delete(this);\n\t\treturn this;\n\t}\n\n\tpublic get isOpen(): boolean {\n\t\treturn (this.ImageDetails)\n\t\t\t? this.ImageDetails.details.open\n\t\t\t: false;\n\t}\n\n\tprivate onToggle = (): void => {\n\t\tif (!this.ImageDetails) return;\n\t\tconst { draggableClass, resizableClass } = this.options;\n\t\tconst { details } = this.ImageDetails;\n\t\tif (details.open) {\n\t\t\tdetails.classList.add(draggableClass);\n\t\t\tdetails.classList.add(resizableClass);\n\t\t\tthis.ImageDetails.updateMarker(this.markerOpen);\n\t\t} else {\n\t\t\tdetails.classList.remove(draggableClass);\n\t\t\tdetails.classList.remove(resizableClass);\n\t\t\tdetails.removeAttribute('style');\n\t\t\tthis.ImageDetails.updateMarker(this.markerClosed);\n\t\t}\n\t}\n\n\tprivate onDocumentKeydown = (e: KeyboardEvent): void => {\n\t\tif (!this.ImageDetails || e.key !== 'Escape') return;\n\n\t\tconst { closeAllOnEscape } = this.options;\n\t\tconst { details } = this.ImageDetails;\n\t\tif (closeAllOnEscape) details.removeAttribute('open');\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: ImageOverlayOptions,\n\t): Promise<ImageOverlay | null> {\n\t\tconst opts = { ...ImageOverlay.defaultOptions, ...options };\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageOverlay(image, opts);\n\t\tawait instance.enable();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll(\n\t\t{ selector = 'img', ...options }: Partial<ImageOverlayOptions & { selector?: string }> = {},\n\t): Promise<typeof ImageOverlay.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageOverlay.enhance(el, options)));\n\t\treturn ImageOverlay.instances;\n\t}\n\n\tpublic static get instances(): ImageOverlay[] {\n\t\treturn Array.from(ImageOverlay.Instances);\n\t}\n}\n","import { DescriptionAttribute } from '../../utilities';\n\ninterface EnhanceAllOptions {\n\tselector?: string;\n}\n\ninterface ImageModalOptions {\n\tfoo?: string;\n}\n\n/**\n * TODO: implement an enhancement that displays the image and its description in\n * a modal dialog interface.\n */\nexport class ImageModal {\n\tprivate static Instances = new Set<ImageModal>();\n\n\tprotected constructor(\n\t\tpublic image: HTMLImageElement,\n\t\tpublic options: Required<ImageModalOptions>,\n\t) {\n\t\tImageModal.Instances.add(this);\n\t}\n\n\tpublic enable(): Promise<void> {\n\t\t// TODO\n\t\t// eslint-disable-next-line\n\t\tconsole.log(this);\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic static selector = 'img';\n\n\tpublic static get instances(): ImageModal[] {\n\t\treturn Array.from(ImageModal.Instances);\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: Partial<ImageModal['options']>,\n\t): Promise<ImageModal | null> {\n\t\tconst opts = {\n\t\t\t...ImageModal.defaultOptions,\n\t\t\t...options,\n\t\t};\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageModal(image, opts);\n\t\tawait instance.enable();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll({\n\t\tselector = ImageModal.selector,\n\t\t...options\n\t}: EnhanceAllOptions = {}): Promise<typeof ImageModal.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageModal.enhance(el, options)));\n\t\treturn ImageModal.instances;\n\t}\n\n\tpublic static defaultOptions: Required<ImageModalOptions> = {\n\t\tfoo: '',\n\t}\n}\n","import { ImageDetails, ImageOverlay } from '../../src';\n\nconst noop = () => {};\t// eslint-disable-line @typescript-eslint/no-empty-function\n\nImageOverlay.enhanceAll({\n\tselector: '.overlay',\n}).then(console.log, noop);\n\nImageDetails.enhanceAll({\n\tselector: '.details',\n}).then(console.log, noop);\n"],"names":["$742cb847985d7602511d0c5faafdee7d$var$omitTags","tagNames","n","HTMLElement","some","tagName","toUpperCase","$742cb847985d7602511d0c5faafdee7d$var$filterNode","node","filters","test","$742cb847985d7602511d0c5faafdee7d$export$DescriptionAttribute","DescriptionAttribute","$742cb847985d7602511d0c5faafdee7d$export$getDescriptionByAttr","async","el","attr","attrValue","getAttribute","hasAttribute","LONGDESC","contents","url","init","req","Request","hash","origin","pathname","URL","window","location","document","querySelector","res","fetch","status","html","text","doc","parser","DOMParser","parseFromString","body","firstChild","DocumentFragment","Array","from","childNodes","forEach","append","$742cb847985d7602511d0c5faafdee7d$export$fetchElement","desc","createElement","ref","getElementById","cloneNode","$72baba89b4049c0e6a898279f2605a32$export$focusableSelectors","$72baba89b4049c0e6a898279f2605a32$export$getFocusable","querySelectorAll","join","$72baba89b4049c0e6a898279f2605a32$export$appendContent","to","content","div","innerHTML","$a3653e044a76057f7a0735a07c7d31c9$export$noop","$a3653e044a76057f7a0735a07c7d31c9$export$setStyle","style","setAttribute","Object","keys","reduce","a","val","trim","$a3653e044a76057f7a0735a07c7d31c9$var$styleString","$183b378e085b931f94941c5ca5887824$export$ImageDetails","constructor","image","options","this","originalImage","classList","add","getClass","container","createContainer","details","createDetails","Instances","values","description","descriptionAdded","descriptionHeading","onGetDescription","descriptions","Promise","all","filter","map","value","$742cb847985d7602511d0c5faafdee7d$export$getDescription","call","length","descriptionAttribute","descriptionSection","destroy","parentNode","insertBefore","originalDetails","detailsPlacement","refChild","nextSibling","remove","delete","blockName","parentElement","contains","detailsCandidate","nextElementSibling","previousElementSibling","HTMLDetailsElement","summary","createSummary","prepend","marker","createMarker","createContents","displaySummaryText","summaryText","hasDescription","span","summaryMarker","innerMarker","addAltText","createAltSection","createDescriptionSection","altSectionHeading","section","alt","updateMarker","removeChild","element","asSelector","className","opts","defaultOptions","instance","addDescription","enhanceAll","selector","enhance","instances","Set","closeOnEscape","$86aed1996f141ff7d3d9fa1502585fd4$export$Draggable","keyboardEl","e","canGrab","moveX","clientX","moveY","clientY","grabbed","onGrab","onRelease","move","onDrag","drag","excludedElements","excludeFocusable","excluded","composedPath","includes","Boolean","mod","shiftKey","pos","getKeyboardPosition","key","preventDefault","resetPosition","left","top","addEventListener","grab","release","pointermove","moveWithKeyboard","x","y","position","onMove","getComputedStyle","parseInt","step","makeDraggable","$86aed1996f141ff7d3d9fa1502585fd4$export$makeDraggable","$6921920644aee5388b5f0712d76ad184$export$iconPath","$6921920644aee5388b5f0712d76ad184$export$createIcon","isOpen","svg","createElementNS","path","$8be0e24cd1d66ac1df1ec2280231fc65$export$ImageOverlay","ImageDetails","draggableClass","resizableClass","open","markerOpen","removeAttribute","markerClosed","closeAllOnEscape","closed","enabled","draggingClass","onToggle","onDocumentKeydown","disable","removeEventListener","enable","bind","$369766fe0976e738d11cd8cfd5b80b14$export$ImageModal","console","log","resolve","foo","$c8ddc66a6ae01a5cf255fb2409f41c75$var$noop","then"],"version":3,"file":"index.4562cadd.js.map"}