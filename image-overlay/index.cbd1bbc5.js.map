{"mappings":"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","sources":["./src/utilities/description.ts","./src/utilities/elements.ts","./src/utilities/index.ts","./src/enhancements/ImageDetails/index.ts","./src/enhancements/ImageOverlay/draggable.ts","./src/enhancements/ImageOverlay/defaultIcons.ts","./src/enhancements/ImageOverlay/index.ts","./src/enhancements/ImageModal/index.ts","./site/image-overlay/index.ts"],"sourcesContent":["const omitTags = (...tagNames: string[]) => (n: Node): boolean => {\n\tif (n instanceof HTMLElement) {\n\t\treturn !tagNames.some((tagName) => tagName.toUpperCase() === n.tagName.toUpperCase());\n\t}\n\treturn true;\n};\n\ntype NodeFilter = (n: Node) => boolean;\n\nconst filterNode = <T extends Node = HTMLElement>(\n\tnode: T | null,\n\tfilters: NodeFilter[],\n): T | null => ((node && filters.some((test) => test(node))) ? node : null);\n\n/**\n * Fetch an element from a given url. If the URL is a whole document, the entire\n * body will be returned inside a `DocumentFragment`. Returns `null` if nothing\n * is found.\n */\nexport const fetchElement = async (\n\turl: string,\n\tinit?: Parameters<typeof fetch>[1],\n\tfilters: NodeFilter[] = [\n\t\tomitTags('script', 'style'),\n\t],\n): Promise<HTMLElement | DocumentFragment | null> => {\n\tconst req = new Request(url);\n\tconst { hash, origin, pathname } = new URL(req.url);\n\tconst currentPage = window.location.origin + window.location.pathname;\n\n\t// same-page reference\n\tif ((origin + pathname) === currentPage) {\n\t\treturn filterNode<HTMLElement>(document.querySelector(hash), filters);\n\t}\n\n\t// reference to another page\n\tconst res = await fetch(req, init);\n\tif (res.status === 200) {\n\t\tconst html = await res.text();\n\n\t\tconst parser = new DOMParser();\n\t\tconst doc = parser.parseFromString(html, 'text/html');\n\n\t\t// a fragment on another page\n\t\tif (hash) {\n\t\t\treturn filterNode<HTMLElement>(document.querySelector(hash), filters);\n\t\t}\n\n\t\t// the body doesn't have any contents\n\t\tif (doc.body.firstChild === null) return null;\n\n\t\tconst contents = new DocumentFragment();\n\t\tArray.from(doc.body.childNodes).forEach((node) => {\n\t\t\tif (filters.some((test) => test(node))) {\n\t\t\t\tcontents.append(node);\n\t\t\t}\n\t\t});\n\t\treturn contents;\n\t}\n\n\treturn null;\n};\n\n/* eslint-disable no-shadow */\n/** All of the HTML attributes that can be used to reference a description. */\nexport enum DescriptionAttribute {\n\tARIA_DETAILS = 'aria-details',\n\tARIA_DESCRIBEDBY = 'aria-describedby',\n\tLONGDESC = 'longdesc',\n}\n/* eslint-enable no-shadow */\n\nexport interface Description {\n\tattr: DescriptionAttribute | null;\n\tvalue: HTMLElement | null;\n}\n\nexport const getDescriptionByAttr = async (\n\tel: HTMLElement,\n\tattr: DescriptionAttribute,\n): Promise<HTMLElement | null> => {\n\tconst attrValue = el.getAttribute(attr);\n\tif (!el.hasAttribute(attr) || !attrValue) return null;\n\n\t// longdesc: retrieve the description from a separate document\n\tif (attr === DescriptionAttribute.LONGDESC) {\n\t\tconst contents = await fetchElement(attrValue);\n\t\tif (contents instanceof DocumentFragment) {\n\t\t\tconst desc = document.createElement('div');\n\t\t\tdesc.append(contents);\n\t\t\treturn desc;\n\t\t}\n\t\treturn contents;\n\t}\n\n\tconst ref = document.getElementById(attrValue);\n\tif (ref) return ref.cloneNode(true) as HTMLElement;\n\treturn null;\n};\n\n/**\n * Get the image's long description.\n * Look for description attributes on the image and return the value of the\n * description. Attribute preference is `aria-details` > `longdesc` >\n * `aria-describedby`.\n */\nexport const getDescription = async (el: HTMLElement): Promise<Description[]> => Promise.all(\n\tObject.values(DescriptionAttribute)\n\t\t.filter((attr) => el.hasAttribute(attr))\n\t\t.map(async (attr) => ({\n\t\t\tattr,\n\t\t\tvalue: await getDescriptionByAttr(el, attr),\n\t\t})),\n);\n","export const focusableSelectors = [\n\t'[contentEditable=true]:not([tabindex=\"-1\"])',\n\t'[tabindex]:not([tabindex=\"-1\"])',\n\t'a[href]:not([tabindex=\"-1\"])',\n\t'button:not([disabled]):not([tabindex=\"-1\"])',\n\t'dialog',\n\t'embed:not([tabindex=\"-1\"])',\n\t'iframe:not([tabindex=\"-1\"])',\n\t'input:not([disabled]):not([tabindex=\"-1\"])',\n\t'map[name] area[href]:not([tabindex=\"-1\"])',\n\t'object:not([tabindex=\"-1\"])',\n\t'select:not([disabled]):not([tabindex=\"-1\"])',\n\t'summary:not([tabindex=\"-1\"])',\n\t'textarea:not([disabled]):not([tabindex=\"-1\"])',\n];\n\nexport const getFocusable = (\n\tel: HTMLElement | Document | ShadowRoot = document,\n): NodeListOf<HTMLElement> => el.querySelectorAll(focusableSelectors.join(','));\n\nexport const appendContent = (to: HTMLElement, ...contents: (string | Node)[]): void => {\n\tcontents.forEach((content) => {\n\t\tif (typeof content === 'string') {\n\t\t\tconst div = document.createElement('div');\n\t\t\tdiv.innerHTML = content;\n\t\t\tto.append(div.firstChild as ChildNode);\n\t\t} else {\n\t\t\tto.append(content);\n\t\t}\n\t});\n};\n","export * from './description';\nexport * from './elements';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = (): void => {};\n\nconst styleString = (\n\tstyle: Record<string, string | null>,\n): string => Object.keys(style).reduce((a, attr) => {\n\tconst val = style[attr];\n\treturn (val) ? `${a} ${attr}: ${val};` : a;\n}, '').trim();\n\nexport const setStyle = (el: HTMLElement, style: Parameters<typeof styleString>[0]): void => {\n\tel.setAttribute('style', styleString(style));\n};\n","import {\n\tDescriptionAttribute,\n\tDescription,\n\tgetDescription,\n\tappendContent,\n\tnoop,\n} from '../../utilities';\n\nexport interface ImageDetailsOptions {\n\t/**\n\t * Indicates that the image's `alt` contents should be copied to the\n\t * <details> as its first child. This will be `aria-hidden` so that users\n\t * who read it on the image don't have to read it again.\n\t */\n\taddAltText?: boolean;\n\t/**\n\t * Where the `<details>` should be placed relative to the image in the DOM.\n\t *\n\t * * `after-image` indicates `img + details`.\n\t * * `before-image` indicates `details + img`.\n\t */\n\tdetailsPlacement?: 'after-image' | 'before-image';\n\t/**\n\t * Indicates whether the summary's textual content should be visible. If\n\t * `false`, the summary text will be set as both the `aria-label` and `title`.\n\t */\n\tdisplaySummaryText?: boolean;\n\t/**\n\t * Indicates that the `Escape` key should close the `<details>`. Note that\n\t * `Escape` will always close the `details` if focus is on the `<summary>`.\n\t */\n\tcloseOnEscape?: boolean;\n\t/**\n\t * HTML string heading for the alt text section of the `<details>`. Only used\n\t * if `addAltText` is `true`. Default is `<h2>Alt Text</h2>`.\n\t */\n\taltSectionHeading?: () => string | HTMLElement;\n\t/**\n\t * HTML string heading for the long description section of the `<details>`.\n\t * Default is `<h2>Image Description</h2>`.\n\t */\n\tdescriptionHeading?: () => string | HTMLElement;\n\t/**\n\t * A custom `summary::marker` element. If included, it will be added as the\n\t * first child of the `<summary>` and will be accessible on the instance as\n\t * `ImageDetailsInstance.marker`.\n\t *\n\t * To specify a different element on open and close, pass an object with\n\t * `open` and `closed` values.\n\t */\n\tsummaryMarker?: () => string | HTMLElement | SVGSVGElement | null;\n\t/** Text to display in the <summary> element. */\n\tsummaryText?: (\n\t\t/** Indicates whether a long description exists. */\n\t\thasDescription: boolean\n\t) => string;\n\t/**\n\t * The class for the `<div>` that wraps the `<img> + <details>`. This will\n\t * also be used as the \"block\" name in the BEM class naming for child elements.\n\t */\n\tblockName?: string;\n\tonGetDescription?: (descriptions: Description[]) => void;\n}\n\nexport class ImageDetails {\n\tpublic description?: string | Node | null;\n\tpublic container: HTMLElement;\n\tpublic details: HTMLDetailsElement;\n\tpublic summary!: HTMLElement;\n\tpublic marker!: HTMLSpanElement;\n\tpublic contents!: HTMLDivElement;\n\tpublic descriptionSection: HTMLElement | null = null;\n\tpublic descriptionAttribute: DescriptionAttribute | null = null;\n\tprivate originalImage: HTMLImageElement;\n\tprivate originalDetails: HTMLDetailsElement | null = null;\n\tprivate descriptionAdded = false;\n\t// private hasAdjacentDetails = false;\n\t// private existingDetailsDescription = false;\n\n\tprivate static Instances = new Set<ImageDetails>();\n\tpublic static baseName = 'image-details';\n\tpublic static defaultOptions: Required<ImageDetailsOptions> = {\n\t\taddAltText: true,\n\t\tdetailsPlacement: 'after-image',\n\t\tdisplaySummaryText: true,\n\t\tcloseOnEscape: true,\n\t\taltSectionHeading: () => '<h2>Short description</h2>',\n\t\tdescriptionHeading: () => '<h2>Long description</h2>',\n\t\tsummaryMarker: () => null,\n\t\tsummaryText: (hasDescription: boolean): string => {\n\t\t\tlet text = 'Description';\n\t\t\tif (!hasDescription) text += ' (only alt text)';\n\t\t\treturn text;\n\t\t},\n\n\t\tblockName: 'image-details',\n\n\t\tonGetDescription: noop,\n\t}\n\n\tprotected constructor(\n\t\tpublic image: HTMLImageElement,\n\t\tpublic options: Required<ImageDetailsOptions>,\n\t) {\n\t\tthis.originalImage = this.image.cloneNode(true) as HTMLImageElement;\n\n\t\tthis.image.classList.add(this.getClass('image'));\n\n\t\tthis.container = this.createContainer();\n\t\tthis.details = this.createDetails();\n\n\t\tthis.container.append(this.image, this.details);\n\n\t\tImageDetails.Instances.add(this);\n\t}\n\n\tpublic get hasDescription(): boolean {\n\t\treturn Object.values(DescriptionAttribute)\n\t\t\t.some((attr) => this.image.getAttribute(attr));\n\t}\n\n\tpublic async addDescription(description?: string | Node): Promise<void> {\n\t\tif (this.descriptionAdded) return;\n\t\tconst { descriptionHeading, onGetDescription = noop } = this.options;\n\n\t\tif (description) {\n\t\t\tthis.description = description;\n\t\t} else {\n\t\t\tconst descriptions = await getDescription(this.image);\n\t\t\tonGetDescription.call(this, descriptions);\n\t\t\tif (descriptions.length) {\n\t\t\t\tconst [{ attr, value }] = descriptions;\n\t\t\t\tthis.descriptionAttribute = attr;\n\t\t\t\tthis.description = value;\n\t\t\t}\n\t\t}\n\n\t\tif (this.description && this.descriptionSection) {\n\t\t\tappendContent(this.descriptionSection, descriptionHeading(), this.description);\n\t\t\tthis.descriptionAdded = true;\n\t\t}\n\t}\n\n\tpublic destroy(): this {\n\t\t(this.container.parentNode || document).insertBefore(this.originalImage, this.container);\n\t\tif (this.originalDetails) {\n\t\t\tconst { detailsPlacement } = this.options;\n\t\t\tconst refChild = (detailsPlacement === 'after-image')\n\t\t\t\t? this.originalImage.nextSibling\n\t\t\t\t: this.originalImage;\n\t\t\t(this.originalImage.parentNode || document).insertBefore(this.originalDetails, refChild);\n\t\t}\n\t\tthis.container.remove();\n\t\tImageDetails.Instances.delete(this);\n\t\treturn this;\n\t}\n\n\t// element constructors\n\n\tprivate createContainer(): HTMLElement {\n\t\tif (this.container) return this.container;\n\t\tconst { blockName } = this.options;\n\t\tconst { parentElement } = this.image;\n\t\tconst container = (\n\t\t\tparentElement instanceof HTMLElement && parentElement.classList.contains(blockName)\n\t\t) ? parentElement : document.createElement('div');\n\t\tcontainer.classList.add(blockName);\n\t\tif (container.contains(this.image)) return container;\n\n\t\t// append to the document\n\t\t(parentElement || document).insertBefore(container, this.image);\n\n\t\treturn container;\n\t}\n\n\tprivate createDetails(): HTMLDetailsElement {\n\t\tif (this.details) return this.details;\n\t\tconst { detailsPlacement } = this.options;\n\n\t\tlet details = document.createElement('details');\n\n\t\tconst detailsCandidate = (detailsPlacement === 'after-image')\n\t\t\t? this.image.nextElementSibling\n\t\t\t: this.image.previousElementSibling;\n\n\t\tif (detailsCandidate instanceof HTMLDetailsElement) {\n\t\t\t// `img + details` already exists so use it, storing a copy of the original\n\t\t\tthis.originalDetails = detailsCandidate.cloneNode(true) as HTMLDetailsElement;\n\t\t\tdetails = detailsCandidate;\n\t\t} else {\n\t\t\t// add the new details to the document\n\t\t\tconst refChild = (detailsPlacement === 'after-image')\n\t\t\t\t? this.image.nextSibling : this.image;\n\t\t\t(this.image.parentNode || document).insertBefore(details, refChild);\n\n\t\t\t// create the summary\n\t\t\tthis.summary = this.createSummary();\n\t\t\tdetails.prepend(this.summary);\n\n\t\t\t// create the summary marker\n\t\t\tthis.marker = this.createMarker();\n\t\t\tthis.summary.prepend(this.marker);\n\n\t\t\t// create the contents\n\t\t\tthis.contents = this.createContents();\n\t\t\tdetails.append(this.contents);\n\t\t}\n\n\t\tdetails.classList.add(this.getClass('details'));\n\n\t\treturn details;\n\t}\n\n\tprivate createSummary(): HTMLElement {\n\t\tconst { displaySummaryText, summaryText } = this.options;\n\n\t\tconst summary = document.createElement('summary');\n\t\tsummary.classList.add(this.getClass('summary'));\n\t\tconst text = summaryText(this.hasDescription);\n\t\tif (!displaySummaryText) {\n\t\t\tsummary.setAttribute('aria-label', text);\n\t\t\tsummary.setAttribute('title', text);\n\t\t} else {\n\t\t\tconst span = document.createElement('span');\n\t\t\tappendContent(span, text);\n\t\t\tsummary.append(span);\n\t\t}\n\n\t\treturn summary;\n\t}\n\n\tprivate createMarker(): HTMLSpanElement {\n\t\tconst { summaryMarker } = this.options;\n\n\t\tconst innerMarker = summaryMarker();\n\t\tconst marker = document.createElement('span');\n\t\tmarker.classList.add(this.getClass('marker'));\n\t\tif (innerMarker) marker.append(innerMarker);\n\n\t\treturn marker;\n\t}\n\n\tprivate createContents(): HTMLDivElement {\n\t\tconst { addAltText } = this.options;\n\n\t\tconst contents = document.createElement('div');\n\t\tcontents.classList.add(this.getClass('contents'));\n\t\tif (addAltText) contents.append(this.createAltSection());\n\t\tcontents.append(this.createDescriptionSection());\n\n\t\treturn contents;\n\t}\n\n\tprivate createAltSection(): HTMLElement {\n\t\tconst { altSectionHeading } = this.options;\n\t\tconst section = document.createElement('section');\n\t\tsection.classList.add(this.getClass('alt'));\n\t\tsection.setAttribute('aria-hidden', 'true');\n\t\tappendContent(section, altSectionHeading(), `<p>${this.image.alt}</p>`);\n\t\treturn section;\n\t}\n\n\tprivate createDescriptionSection(): HTMLElement {\n\t\tconst section = document.createElement('section');\n\t\tsection.classList.add(this.getClass('desc'));\n\t\tthis.descriptionSection = section;\n\t\treturn section;\n\t}\n\n\tpublic updateMarker(marker: ReturnType<NonNullable<ImageDetailsOptions['summaryMarker']>>): this {\n\t\twhile (this.marker.firstChild) {\n\t\t\tthis.marker.removeChild(this.marker.firstChild);\n\t\t}\n\t\tif (marker) this.marker.append(marker);\n\t\treturn this;\n\t}\n\n\tprivate getClass(element: string, asSelector = false): string {\n\t\tconst { blockName } = this.options;\n\t\tconst className = `${blockName}__${element}`;\n\t\tif (asSelector) return `.${className}`;\n\t\treturn className;\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: ImageDetailsOptions,\n\t): Promise<ImageDetails | null> {\n\t\tconst opts = { ...ImageDetails.defaultOptions, ...options };\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageDetails(image, opts);\n\t\tawait instance.addDescription();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll(\n\t\t{ selector = 'img', ...options }: ImageDetailsOptions & { selector?: string } = {},\n\t): Promise<typeof ImageDetails.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageDetails.enhance(el, options)));\n\t\treturn ImageDetails.instances;\n\t}\n\n\tpublic static get instances(): ImageDetails[] {\n\t\treturn Array.from(ImageDetails.Instances);\n\t}\n}\n","import { getFocusable, setStyle, noop } from '../../utilities';\n\nexport interface DraggablePosition {\n\ttop: number | null;\n\tleft: number | null;\n}\n\ninterface DraggableOptions {\n\t/**\n\t * A list of elements that will not initiate the `grab` action, which begins\n\t * the element dragging.\n\t */\n\texcludedElements?: HTMLElement[] | ((draggableElement: HTMLElement) => HTMLElement[]);\n\t/**\n\t * Indicates that all focusable/interactive elements inside the draggable\n\t * element should not initiate dragging. Default is `true`.\n\t */\n\texcludeFocusable?: boolean;\n\n\tonDrag?: () => void;\n\tonGrab?: () => void;\n\tonMove?: () => void;\n\tonRelease?: () => void;\n}\n\nexport class Draggable {\n\tpublic options: Required<DraggableOptions>;\n\tprivate moveX = 0;\n\tprivate moveY = 0;\n\tprivate canGrab = false;\n\tprivate grabbed = false;\n\n\tprotected constructor(\n\t\tpublic el: HTMLElement,\n\t\tpublic keyboardEl: HTMLElement | null,\n\t\toptions?: Partial<DraggableOptions>,\n\t) {\n\t\tthis.options = { ...Draggable.defaultOptions, ...options };\n\n\t\tthis.el.addEventListener('pointerdown', this.grab);\n\t\tthis.el.addEventListener('pointerleave', this.release);\n\t\tthis.el.addEventListener('pointermove', this.pointermove);\n\t\tthis.el.addEventListener('pointerup', this.release);\n\n\t\tif (this.keyboardEl) {\n\t\t\tthis.keyboardEl.addEventListener('keydown', this.moveWithKeyboard);\n\t\t}\n\t}\n\n\tpublic move(x: number, y: number): void {\n\t\tconst { top, left } = this.pos;\n\t\tif (top !== null && left !== null) {\n\t\t\tsetStyle(this.el, {\n\t\t\t\tposition: 'absolute',\n\t\t\t\tleft: `${left + x}px`,\n\t\t\t\ttop: `${top + y}px`,\n\t\t\t});\n\t\t}\n\t\tthis.options.onMove();\n\t}\n\n\tpublic resetPosition(): void {\n\t\tsetStyle(this.el, {\n\t\t\tposition: null,\n\t\t\ttop: null,\n\t\t\tleft: null,\n\t\t});\n\t}\n\n\tpublic get pos(): DraggablePosition {\n\t\tconst { top = '0', left = '0' } = window.getComputedStyle(this.el);\n\t\treturn {\n\t\t\ttop: (top === 'auto') ? null : parseInt(top, 10),\n\t\t\tleft: (top === 'auto') ? null : parseInt(left, 10),\n\t\t};\n\t}\n\n\tprivate grab = (e: MouseEvent): void => {\n\t\tif (!this.canGrab) return;\n\n\t\tthis.moveX = e.clientX;\n\t\tthis.moveY = e.clientY;\n\t\tthis.grabbed = true;\n\t\tthis.options.onGrab();\n\t};\n\n\tprivate release = (): void => {\n\t\tthis.moveX = 0;\n\t\tthis.moveY = 0;\n\t\tthis.grabbed = false;\n\t\tthis.options.onRelease();\n\t};\n\n\tprivate drag = ({ clientX, clientY }: MouseEvent): void => {\n\t\tthis.move(clientX - this.moveX, clientY - this.moveY);\n\t\tthis.moveX = clientX;\n\t\tthis.moveY = clientY;\n\t\tthis.options.onDrag();\n\t}\n\n\tprivate pointermove = (e: MouseEvent): void => {\n\t\tif (this.grabbed) {\n\t\t\tthis.drag(e);\n\t\t} else {\n\t\t\tconst { excludedElements, excludeFocusable } = this.options;\n\n\t\t\tconst excluded = [\n\t\t\t\t...((typeof excludedElements === 'function') ? excludedElements(this.el) : excludedElements),\n\t\t\t\t...((excludeFocusable) ? Array.from(getFocusable(this.el)) : []),\n\t\t\t].filter((el) => el && e.composedPath().includes(el));\n\n\t\t\tthis.canGrab = !excluded.some(Boolean);\n\t\t}\n\t};\n\n\tprivate moveWithKeyboard = (e: KeyboardEvent): void => {\n\t\tconst mod = e.shiftKey ? 20 : 1;\n\t\tconst pos = Draggable.getKeyboardPosition(e.key, 5 * mod);\n\t\tif (!pos) return;\n\t\te.preventDefault();\n\t\tif (pos === 'reset') this.resetPosition();\n\t\telse {\n\t\t\tconst { left, top } = pos;\n\t\t\tthis.move(left, top);\n\t\t}\n\t};\n\n\tprivate static getKeyboardPosition(\n\t\tkey: KeyboardEvent['key'],\n\t\tstep: number,\n\t): { top: number; left: number } | 'reset' | null {\n\t\tswitch (key) {\n\t\t\tcase 'ArrowRight': return { left: step, top: 0 };\n\t\t\tcase 'ArrowLeft': return { left: -step, top: 0 };\n\t\t\tcase 'ArrowDown': return { left: 0, top: step };\n\t\t\tcase 'ArrowUp': return { left: 0, top: -step };\n\t\t\tcase 'Home': return 'reset';\n\t\t\tdefault: return null;\n\t\t}\n\t}\n\n\tpublic static defaultOptions: Required<DraggableOptions> = {\n\t\texcludedElements: [],\n\t\texcludeFocusable: true,\n\n\t\tonDrag: noop,\n\t\tonGrab: noop,\n\t\tonMove: noop,\n\t\tonRelease: noop,\n\t};\n\n\tpublic static makeDraggable = ({ el, keyboardEl, ...options }: DraggableOptions & {\n\t\tel: HTMLElement;\n\t\tkeyboardEl: HTMLElement | null;\n\t}): Draggable => new Draggable(el, keyboardEl, options);\n}\n\nexport const { makeDraggable } = Draggable;\n","export const iconPath = {\n\t/** https://material.io/resources/icons/?icon=details&style=baseline */\n\tdetails: 'M3 4l9 16 9-16H3zm3.38 2h11.25L12 16 6.38 6z',\n\t/** https://material.io/resources/icons/?icon=close&style=baseline */\n\tclose: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z',\n\t/** https://material.io/resources/icons/?icon=north_east&style=baseline */\n\tnorthEast: 'M9,5v2h6.59L4,18.59L5.41,20L17,8.41V15h2V5H9z',\n};\n\nexport const createIcon = (isOpen = false): SVGSVGElement => {\n\tconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\tsvg.setAttribute('role', 'img');\n\tsvg.setAttribute('viewBox', '0 0 24 24');\n\tsvg.setAttribute('focusable', 'false');\n\tsvg.setAttribute('aria-hidden', 'true');\n\n\tconst path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\tpath.setAttribute('fill', 'currentColor');\n\tpath.setAttribute('d', (isOpen) ? iconPath.close : iconPath.northEast);\n\n\tsvg.append(path);\n\treturn svg;\n};\n","import { ImageDetails, ImageDetailsOptions } from '../ImageDetails';\nimport { DescriptionAttribute, Description, noop } from '../../utilities';\nimport { makeDraggable } from './draggable';\nimport { createIcon } from './defaultIcons';\n\nexport interface ImageOverlayOptions {\n\t/**\n\t * Indicates that the `Escape` key should close all `<details>`. Note that\n\t * `Escape` will always close the `details` if focus is on the `<summary>`.\n\t */\n\tcloseAllOnEscape?: boolean;\n\tdraggableClass?: string;\n\tdraggingClass?: string;\n\tresizableClass?: string;\n\tonGetDescription?: (descriptions: Description[]) => void;\n\tmarker?: ImageDetailsOptions['summaryMarker'] | Record<'open' | 'closed', ImageDetailsOptions['summaryMarker']>;\n}\n\nexport class ImageOverlay {\n\tprivate enabled = false;\n\tpublic ImageDetails: ImageDetails | null = null;\n\n\tprivate static Instances = new Set<ImageOverlay>();\n\n\tpublic static defaultOptions: Required<ImageOverlayOptions> = {\n\t\tcloseAllOnEscape: true,\n\t\tdraggingClass: 'dragging',\n\t\tdraggableClass: 'draggable',\n\t\tresizableClass: 'resizable',\n\t\tonGetDescription: noop,\n\t\tmarker: {\n\t\t\topen: createIcon.bind(null, true),\n\t\t\tclosed: createIcon.bind(null, false),\n\t\t},\n\t}\n\n\tprotected constructor(\n\t\tpublic image: HTMLImageElement,\n\t\tpublic options: Required<ImageOverlayOptions>,\n\t) {\n\t\tImageOverlay.Instances.add(this);\n\t}\n\n\tprivate get markerOpen(): string | HTMLElement | SVGSVGElement | null {\n\t\tconst { marker } = this.options;\n\t\tif ('open' in marker && typeof marker.open === 'function') return marker.open();\n\t\tif (typeof marker === 'function') return marker();\n\t\treturn null;\n\t}\n\n\tprivate get markerClosed(): string | HTMLElement | SVGSVGElement | null {\n\t\tconst { marker } = this.options;\n\t\tif ('closed' in marker && typeof marker.closed === 'function') return marker.closed();\n\t\tif (typeof marker === 'function') return marker();\n\t\treturn null;\n\t}\n\n\tpublic async enable(): Promise<void> {\n\t\tif (this.enabled) return;\n\n\t\tconst { onGetDescription, draggingClass } = this.options;\n\n\t\tthis.ImageDetails = await ImageDetails.enhance(this.image, {\n\t\t\tblockName: 'overlaid',\n\t\t\tdisplaySummaryText: false,\n\t\t\tsummaryMarker: () => this.markerClosed,\n\t\t\tonGetDescription,\n\t\t});\n\n\t\tif (!this.ImageDetails) return;\n\n\t\tconst { details, summary } = this.ImageDetails;\n\n\t\tmakeDraggable({\n\t\t\tel: details,\n\t\t\tkeyboardEl: summary,\n\t\t\tonDrag: () => {\n\t\t\t\tdetails.classList.add(draggingClass);\n\t\t\t},\n\t\t\tonRelease: () => {\n\t\t\t\tdetails.classList.remove(draggingClass);\n\t\t\t},\n\t\t});\n\n\t\tdetails.addEventListener('toggle', this.onToggle);\n\t\tdocument.addEventListener('keydown', this.onDocumentKeydown);\n\n\t\tthis.enabled = true;\n\t}\n\n\tpublic disable(): this {\n\t\tif (!this.enabled || !this.ImageDetails) return this;\n\t\tconst { details } = this.ImageDetails;\n\t\tdetails.removeEventListener('toggle', this.onToggle);\n\t\tdocument.removeEventListener('keydown', this.onDocumentKeydown);\n\t\tthis.enabled = false;\n\t\treturn this;\n\t}\n\n\tpublic destroy(): this {\n\t\tif (this.enabled) this.disable();\n\t\tif (this.ImageDetails) this.ImageDetails.destroy();\n\t\tImageOverlay.Instances.delete(this);\n\t\treturn this;\n\t}\n\n\tpublic get isOpen(): boolean {\n\t\treturn (this.ImageDetails)\n\t\t\t? this.ImageDetails.details.open\n\t\t\t: false;\n\t}\n\n\tprivate onToggle = (): void => {\n\t\tif (!this.ImageDetails) return;\n\t\tconst { draggableClass, resizableClass } = this.options;\n\t\tconst { details } = this.ImageDetails;\n\t\tif (details.open) {\n\t\t\tdetails.classList.add(draggableClass);\n\t\t\tdetails.classList.add(resizableClass);\n\t\t\tthis.ImageDetails.updateMarker(this.markerOpen);\n\t\t} else {\n\t\t\tdetails.classList.remove(draggableClass);\n\t\t\tdetails.classList.remove(resizableClass);\n\t\t\tdetails.removeAttribute('style');\n\t\t\tthis.ImageDetails.updateMarker(this.markerClosed);\n\t\t}\n\t}\n\n\tprivate onDocumentKeydown = (e: KeyboardEvent): void => {\n\t\tif (!this.ImageDetails || e.key !== 'Escape') return;\n\n\t\tconst { closeAllOnEscape } = this.options;\n\t\tconst { details } = this.ImageDetails;\n\t\tif (closeAllOnEscape) details.removeAttribute('open');\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: ImageOverlayOptions,\n\t): Promise<ImageOverlay | null> {\n\t\tconst opts = { ...ImageOverlay.defaultOptions, ...options };\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageOverlay(image, opts);\n\t\tawait instance.enable();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll(\n\t\t{ selector = 'img', ...options }: Partial<ImageOverlayOptions & { selector?: string }> = {},\n\t): Promise<typeof ImageOverlay.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageOverlay.enhance(el, options)));\n\t\treturn ImageOverlay.instances;\n\t}\n\n\tpublic static get instances(): ImageOverlay[] {\n\t\treturn Array.from(ImageOverlay.Instances);\n\t}\n}\n","import { DescriptionAttribute } from '../../utilities';\n\ninterface EnhanceAllOptions {\n\tselector?: string;\n}\n\ninterface ImageModalOptions {\n\tfoo?: string;\n}\n\n/**\n * TODO: implement an enhancement that displays the image and its description in\n * a modal dialog interface.\n */\nexport class ImageModal {\n\tprivate static Instances = new Set<ImageModal>();\n\n\tprotected constructor(\n\t\tpublic image: HTMLImageElement,\n\t\tpublic options: Required<ImageModalOptions>,\n\t) {\n\t\tImageModal.Instances.add(this);\n\t}\n\n\tpublic enable(): Promise<void> {\n\t\t// TODO\n\t\t// eslint-disable-next-line\n\t\tconsole.log(this);\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic static selector = 'img';\n\n\tpublic static get instances(): ImageModal[] {\n\t\treturn Array.from(ImageModal.Instances);\n\t}\n\n\tpublic static async enhance(\n\t\timage: HTMLImageElement,\n\t\toptions?: Partial<ImageModal['options']>,\n\t): Promise<ImageModal | null> {\n\t\tconst opts = {\n\t\t\t...ImageModal.defaultOptions,\n\t\t\t...options,\n\t\t};\n\t\tconst hasDesc = Object.values(DescriptionAttribute).some((attr) => image.getAttribute(attr));\n\t\tif (!hasDesc && !image.alt) return null;\n\t\tconst instance = new ImageModal(image, opts);\n\t\tawait instance.enable();\n\t\treturn instance;\n\t}\n\n\tpublic static async enhanceAll({\n\t\tselector = ImageModal.selector,\n\t\t...options\n\t}: EnhanceAllOptions = {}): Promise<typeof ImageModal.instances> {\n\t\tawait Promise.all(Array.from(document.querySelectorAll<HTMLImageElement>(selector))\n\t\t\t.map(async (el) => ImageModal.enhance(el, options)));\n\t\treturn ImageModal.instances;\n\t}\n\n\tpublic static defaultOptions: Required<ImageModalOptions> = {\n\t\tfoo: '',\n\t}\n}\n","import { ImageDetails, ImageOverlay } from '../../src';\n\nconst noop = () => {};\t// eslint-disable-line @typescript-eslint/no-empty-function\n\nImageOverlay.enhanceAll({\n\tselector: '.overlay',\n}).then(console.log, noop);\n\nImageDetails.enhanceAll({\n\tselector: '.details',\n}).then(console.log, noop);\n"],"names":["omitTags","tagNames","n","HTMLElement","some","tagName","toUpperCase","filterNode","node","filters","test","DescriptionAttribute","getDescriptionByAttr","async","el","attr","attrValue","getAttribute","hasAttribute","LONGDESC","contents","url","init","req","Request","hash","origin","pathname","URL","window","location","document","querySelector","res","fetch","status","html","text","doc","DOMParser","parseFromString","body","firstChild","DocumentFragment","Array","from","childNodes","forEach","append","fetchElement","desc","createElement","ref","getElementById","cloneNode","focusableSelectors","getFocusable","querySelectorAll","join","appendContent","to","content","div","innerHTML","noop","setStyle","style","setAttribute","Object","keys","reduce","a","val","trim","styleString","ImageDetails","constructor","image","options","$b943e150381446de0db48e498aeb8682$var$_defineProperty","this","originalImage","classList","add","getClass","container","createContainer","details","createDetails","Instances","hasDescription","values","$60b80ecb08d4519d26963f8b9616f7f3$export$DescriptionAttribute","[object Object]","description","descriptionAdded","descriptionHeading","onGetDescription","$ade5b48c71099b4decd700881dc0bcf1$export$noop","descriptions","Promise","all","filter","map","value","$60b80ecb08d4519d26963f8b9616f7f3$export$getDescription","call","length","descriptionAttribute","descriptionSection","$a665fd2a42fce9339226c25d96914a3f$export$appendContent","destroy","parentNode","insertBefore","originalDetails","detailsPlacement","refChild","nextSibling","remove","delete","blockName","parentElement","contains","detailsCandidate","nextElementSibling","previousElementSibling","HTMLDetailsElement","summary","createSummary","prepend","marker","createMarker","createContents","displaySummaryText","summaryText","span","summaryMarker","innerMarker","addAltText","createAltSection","createDescriptionSection","altSectionHeading","section","alt","updateMarker","removeChild","element","asSelector","className","opts","defaultOptions","instance","addDescription","selector","enhance","instances","Set","closeOnEscape","Draggable","keyboardEl","$57f6ec6a2834932f85d72fc404cee2c1$var$_defineProperty","e","canGrab","moveX","clientX","moveY","clientY","grabbed","onGrab","onRelease","move","onDrag","drag","excludedElements","excludeFocusable","excluded","$a665fd2a42fce9339226c25d96914a3f$export$getFocusable","composedPath","includes","Boolean","mod","shiftKey","pos","getKeyboardPosition","key","preventDefault","resetPosition","left","top","addEventListener","grab","release","pointermove","moveWithKeyboard","x","y","$ade5b48c71099b4decd700881dc0bcf1$export$setStyle","position","onMove","getComputedStyle","parseInt","step","makeDraggable","iconPath","createIcon","isOpen","svg","createElementNS","path","ImageOverlay","$3fcf41dcd02998bba2d63d92231ba584$var$_defineProperty","draggableClass","resizableClass","open","markerOpen","removeAttribute","markerClosed","closeAllOnEscape","closed","enabled","draggingClass","$b943e150381446de0db48e498aeb8682$export$ImageDetails","$57f6ec6a2834932f85d72fc404cee2c1$export$makeDraggable","onToggle","onDocumentKeydown","disable","removeEventListener","enable","$b08dee75b1028d2c13d5f7d3608755bc$export$createIcon","bind","ImageModal","console","log","resolve","foo","$3fcf41dcd02998bba2d63d92231ba584$export$ImageOverlay","enhanceAll","then"],"version":3,"file":"index.cbd1bbc5.js.map"}